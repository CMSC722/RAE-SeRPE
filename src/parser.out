Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> methods
Rule 2     methods -> method methods
Rule 3     methods -> <empty>
Rule 4     method -> ID LPAREN params RPAREN COLON task pre body
Rule 5     params -> ID COMMA params
Rule 6     params -> ID
Rule 7     params -> <empty>
Rule 8     task -> TASK COLON ID LPAREN params RPAREN
Rule 9     pre -> PRE COLON preconditions
Rule 10    preconditions -> bexpr AND preconditions
Rule 11    preconditions -> bexpr
Rule 12    preconditions -> <empty>
Rule 13    body -> BODY COLON exprs
Rule 14    exprs -> LPAREN exprs RPAREN
Rule 15    exprs -> expr exprs
Rule 16    exprs -> <empty>
Rule 17    expr -> LPAREN expr RPAREN
Rule 18    expr -> control_structure
Rule 19    expr -> bexpr
Rule 20    expr -> aexpr
Rule 21    expr -> string
Rule 22    expr -> state_var_rd
Rule 23    expr -> state_var_wr
Rule 24    expr -> loc_var_rd
Rule 25    expr -> loc_var_wr
Rule 26    control_structure -> while_loop
Rule 27    control_structure -> if_statement
Rule 28    while_loop -> WHILE bexpr DO exprs END
Rule 29    if_statement -> IF bexpr THEN exprs END
Rule 30    if_statement -> IF bexpr THEN exprs elsif_blocks END
Rule 31    if_statement -> IF bexpr THEN exprs ELSE exprs END
Rule 32    if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END
Rule 33    elsif_blocks -> elsif_blocks elsif_block
Rule 34    elsif_blocks -> elsif_block
Rule 35    elsif_block -> ELSIF bexpr THEN exprs
Rule 36    aexpr -> aexpr PLUS aexpr
Rule 37    aexpr -> aexpr MINUS aexpr
Rule 38    aexpr -> aexpr TIMES aexpr
Rule 39    aexpr -> aexpr DIVIDED_BY aexpr
Rule 40    aexpr -> INT
Rule 41    aexpr -> FLOAT
Rule 42    aexpr -> ID
Rule 43    bexpr -> bexpr AND bexpr
Rule 44    bexpr -> bexpr OR bexpr
Rule 45    bexpr -> expr EQUALS expr
Rule 46    bexpr -> expr LT expr
Rule 47    bexpr -> expr GT expr
Rule 48    bexpr -> expr LTE expr
Rule 49    bexpr -> expr GTE expr
Rule 50    bexpr -> NOT bexpr
Rule 51    bexpr -> true
Rule 52    bexpr -> false
Rule 53    bexpr -> state_var_rd
Rule 54    true -> TRUE
Rule 55    false -> FALSE
Rule 56    string -> STRING
Rule 57    state_var_rd -> ID LPAREN state_var_args RPAREN
Rule 58    state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr
Rule 59    state_var_args -> state_var_arg COMMA state_var_args
Rule 60    state_var_args -> state_var_arg
Rule 61    state_var_arg -> state_var_rd
Rule 62    state_var_arg -> ID
Rule 63    loc_var_rd -> ID
Rule 64    loc_var_wr -> ID ASSIGN expr

Terminals, with rules where they appear

AND                  : 10 43
ASSIGN               : 58 64
BODY                 : 13
COLON                : 4 8 9 13
COMMA                : 5 59
DIVIDED_BY           : 39
DO                   : 28
ELSE                 : 31 32
ELSIF                : 35
END                  : 28 29 30 31 32
EQUALS               : 45
FALSE                : 55
FLOAT                : 41
GT                   : 47
GTE                  : 49
ID                   : 4 5 6 8 42 57 58 62 63 64
IF                   : 29 30 31 32
INT                  : 40
LPAREN               : 4 8 14 17 57 58
LT                   : 46
LTE                  : 48
MINUS                : 37
NOT                  : 50
OR                   : 44
PLUS                 : 36
PRE                  : 9
RPAREN               : 4 8 14 17 57 58
STRING               : 56
TASK                 : 8
THEN                 : 29 30 31 32 35
TIMES                : 38
TRUE                 : 54
WHILE                : 28
error                : 

Nonterminals, with rules where they appear

aexpr                : 20 36 36 37 37 38 38 39 39
bexpr                : 10 11 19 28 29 30 31 32 35 43 43 44 44 50
body                 : 4
control_structure    : 18
elsif_block          : 33 34
elsif_blocks         : 30 32 33
expr                 : 15 17 45 45 46 46 47 47 48 48 49 49 58 64
exprs                : 13 14 15 28 29 30 31 31 32 32 35
false                : 52
if_statement         : 27
loc_var_rd           : 24
loc_var_wr           : 25
method               : 2
methods              : 1 2
params               : 4 5 8
pre                  : 4
preconditions        : 9 10
start                : 0
state_var_arg        : 59 60
state_var_args       : 57 58 59
state_var_rd         : 22 53 61
state_var_wr         : 23
string               : 21
task                 : 4
true                 : 51
while_loop           : 26

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . methods
    (2) methods -> . method methods
    (3) methods -> .
    (4) method -> . ID LPAREN params RPAREN COLON task pre body

    $end            reduce using rule 3 (methods -> .)
    ID              shift and go to state 4

    methods                        shift and go to state 1
    start                          shift and go to state 3
    method                         shift and go to state 2

state 1

    (1) start -> methods .

    $end            reduce using rule 1 (start -> methods .)


state 2

    (2) methods -> method . methods
    (2) methods -> . method methods
    (3) methods -> .
    (4) method -> . ID LPAREN params RPAREN COLON task pre body

    $end            reduce using rule 3 (methods -> .)
    ID              shift and go to state 4

    methods                        shift and go to state 5
    method                         shift and go to state 2

state 3

    (0) S' -> start .



state 4

    (4) method -> ID . LPAREN params RPAREN COLON task pre body

    LPAREN          shift and go to state 6


state 5

    (2) methods -> method methods .

    $end            reduce using rule 2 (methods -> method methods .)


state 6

    (4) method -> ID LPAREN . params RPAREN COLON task pre body
    (5) params -> . ID COMMA params
    (6) params -> . ID
    (7) params -> .

    ID              shift and go to state 8
    RPAREN          reduce using rule 7 (params -> .)

    params                         shift and go to state 7

state 7

    (4) method -> ID LPAREN params . RPAREN COLON task pre body

    RPAREN          shift and go to state 9


state 8

    (5) params -> ID . COMMA params
    (6) params -> ID .

    COMMA           shift and go to state 10
    RPAREN          reduce using rule 6 (params -> ID .)


state 9

    (4) method -> ID LPAREN params RPAREN . COLON task pre body

    COLON           shift and go to state 11


state 10

    (5) params -> ID COMMA . params
    (5) params -> . ID COMMA params
    (6) params -> . ID
    (7) params -> .

    ID              shift and go to state 8
    RPAREN          reduce using rule 7 (params -> .)

    params                         shift and go to state 12

state 11

    (4) method -> ID LPAREN params RPAREN COLON . task pre body
    (8) task -> . TASK COLON ID LPAREN params RPAREN

    TASK            shift and go to state 14

    task                           shift and go to state 13

state 12

    (5) params -> ID COMMA params .

    RPAREN          reduce using rule 5 (params -> ID COMMA params .)


state 13

    (4) method -> ID LPAREN params RPAREN COLON task . pre body
    (9) pre -> . PRE COLON preconditions

    PRE             shift and go to state 16

    pre                            shift and go to state 15

state 14

    (8) task -> TASK . COLON ID LPAREN params RPAREN

    COLON           shift and go to state 17


state 15

    (4) method -> ID LPAREN params RPAREN COLON task pre . body
    (13) body -> . BODY COLON exprs

    BODY            shift and go to state 19

    body                           shift and go to state 18

state 16

    (9) pre -> PRE . COLON preconditions

    COLON           shift and go to state 20


state 17

    (8) task -> TASK COLON . ID LPAREN params RPAREN

    ID              shift and go to state 21


state 18

    (4) method -> ID LPAREN params RPAREN COLON task pre body .

    ID              reduce using rule 4 (method -> ID LPAREN params RPAREN COLON task pre body .)
    $end            reduce using rule 4 (method -> ID LPAREN params RPAREN COLON task pre body .)


state 19

    (13) body -> BODY . COLON exprs

    COLON           shift and go to state 22


state 20

    (9) pre -> PRE COLON . preconditions
    (10) preconditions -> . bexpr AND preconditions
    (11) preconditions -> . bexpr
    (12) preconditions -> .
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (54) true -> . TRUE
    (55) false -> . FALSE
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END

    BODY            reduce using rule 12 (preconditions -> .)
    NOT             shift and go to state 46
    LPAREN          shift and go to state 37
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41
    ID              shift and go to state 39
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40

    while_loop                     shift and go to state 33
    false                          shift and go to state 23
    string                         shift and go to state 29
    control_structure              shift and go to state 26
    expr                           shift and go to state 43
    state_var_wr                   shift and go to state 34
    state_var_rd                   shift and go to state 24
    loc_var_rd                     shift and go to state 35
    preconditions                  shift and go to state 36
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    true                           shift and go to state 38
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 28

state 21

    (8) task -> TASK COLON ID . LPAREN params RPAREN

    LPAREN          shift and go to state 47


state 22

    (13) body -> BODY COLON . exprs
    (14) exprs -> . LPAREN exprs RPAREN
    (15) exprs -> . expr exprs
    (16) exprs -> .
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END
    (54) true -> . TRUE
    (55) false -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
    LPAREN          shift and go to state 48
    $end            reduce using rule 16 (exprs -> .)
    NOT             shift and go to state 46
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 51
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41

  ! ID              [ reduce using rule 16 (exprs -> .) ]

    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    true                           shift and go to state 38
    expr                           shift and go to state 52
    state_var_wr                   shift and go to state 34
    exprs                          shift and go to state 53
    state_var_rd                   shift and go to state 49
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 50

state 23

    (52) bexpr -> false .

    AND             reduce using rule 52 (bexpr -> false .)
    OR              reduce using rule 52 (bexpr -> false .)
    EQUALS          reduce using rule 52 (bexpr -> false .)
    LT              reduce using rule 52 (bexpr -> false .)
    GT              reduce using rule 52 (bexpr -> false .)
    LTE             reduce using rule 52 (bexpr -> false .)
    GTE             reduce using rule 52 (bexpr -> false .)
    LPAREN          reduce using rule 52 (bexpr -> false .)
    NOT             reduce using rule 52 (bexpr -> false .)
    INT             reduce using rule 52 (bexpr -> false .)
    FLOAT           reduce using rule 52 (bexpr -> false .)
    ID              reduce using rule 52 (bexpr -> false .)
    STRING          reduce using rule 52 (bexpr -> false .)
    WHILE           reduce using rule 52 (bexpr -> false .)
    IF              reduce using rule 52 (bexpr -> false .)
    TRUE            reduce using rule 52 (bexpr -> false .)
    FALSE           reduce using rule 52 (bexpr -> false .)
    END             reduce using rule 52 (bexpr -> false .)
    ELSE            reduce using rule 52 (bexpr -> false .)
    ELSIF           reduce using rule 52 (bexpr -> false .)
    BODY            reduce using rule 52 (bexpr -> false .)
    $end            reduce using rule 52 (bexpr -> false .)
    RPAREN          reduce using rule 52 (bexpr -> false .)
    THEN            reduce using rule 52 (bexpr -> false .)
    DO              reduce using rule 52 (bexpr -> false .)


state 24

    (53) bexpr -> state_var_rd .
    (22) expr -> state_var_rd .

  ! reduce/reduce conflict for EQUALS resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for LT resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for GT resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for LTE resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for GTE resolved using rule 22 (expr -> state_var_rd .)
    THEN            reduce using rule 53 (bexpr -> state_var_rd .)
    AND             reduce using rule 53 (bexpr -> state_var_rd .)
    OR              reduce using rule 53 (bexpr -> state_var_rd .)
    BODY            reduce using rule 53 (bexpr -> state_var_rd .)
    LPAREN          reduce using rule 53 (bexpr -> state_var_rd .)
    NOT             reduce using rule 53 (bexpr -> state_var_rd .)
    INT             reduce using rule 53 (bexpr -> state_var_rd .)
    FLOAT           reduce using rule 53 (bexpr -> state_var_rd .)
    ID              reduce using rule 53 (bexpr -> state_var_rd .)
    STRING          reduce using rule 53 (bexpr -> state_var_rd .)
    WHILE           reduce using rule 53 (bexpr -> state_var_rd .)
    IF              reduce using rule 53 (bexpr -> state_var_rd .)
    TRUE            reduce using rule 53 (bexpr -> state_var_rd .)
    FALSE           reduce using rule 53 (bexpr -> state_var_rd .)
    $end            reduce using rule 53 (bexpr -> state_var_rd .)
    RPAREN          reduce using rule 53 (bexpr -> state_var_rd .)
    DO              reduce using rule 53 (bexpr -> state_var_rd .)
    END             reduce using rule 53 (bexpr -> state_var_rd .)
    ELSE            reduce using rule 53 (bexpr -> state_var_rd .)
    ELSIF           reduce using rule 53 (bexpr -> state_var_rd .)
    EQUALS          reduce using rule 22 (expr -> state_var_rd .)
    LT              reduce using rule 22 (expr -> state_var_rd .)
    GT              reduce using rule 22 (expr -> state_var_rd .)
    LTE             reduce using rule 22 (expr -> state_var_rd .)
    GTE             reduce using rule 22 (expr -> state_var_rd .)

  ! EQUALS          [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! LT              [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! GT              [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! LTE             [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! GTE             [ reduce using rule 53 (bexpr -> state_var_rd .) ]


state 25

    (25) expr -> loc_var_wr .

    EQUALS          reduce using rule 25 (expr -> loc_var_wr .)
    LT              reduce using rule 25 (expr -> loc_var_wr .)
    GT              reduce using rule 25 (expr -> loc_var_wr .)
    LTE             reduce using rule 25 (expr -> loc_var_wr .)
    GTE             reduce using rule 25 (expr -> loc_var_wr .)
    LPAREN          reduce using rule 25 (expr -> loc_var_wr .)
    NOT             reduce using rule 25 (expr -> loc_var_wr .)
    INT             reduce using rule 25 (expr -> loc_var_wr .)
    FLOAT           reduce using rule 25 (expr -> loc_var_wr .)
    ID              reduce using rule 25 (expr -> loc_var_wr .)
    STRING          reduce using rule 25 (expr -> loc_var_wr .)
    WHILE           reduce using rule 25 (expr -> loc_var_wr .)
    IF              reduce using rule 25 (expr -> loc_var_wr .)
    TRUE            reduce using rule 25 (expr -> loc_var_wr .)
    FALSE           reduce using rule 25 (expr -> loc_var_wr .)
    END             reduce using rule 25 (expr -> loc_var_wr .)
    RPAREN          reduce using rule 25 (expr -> loc_var_wr .)
    ELSE            reduce using rule 25 (expr -> loc_var_wr .)
    ELSIF           reduce using rule 25 (expr -> loc_var_wr .)
    AND             reduce using rule 25 (expr -> loc_var_wr .)
    OR              reduce using rule 25 (expr -> loc_var_wr .)
    BODY            reduce using rule 25 (expr -> loc_var_wr .)
    $end            reduce using rule 25 (expr -> loc_var_wr .)
    THEN            reduce using rule 25 (expr -> loc_var_wr .)
    DO              reduce using rule 25 (expr -> loc_var_wr .)


state 26

    (18) expr -> control_structure .

    EQUALS          reduce using rule 18 (expr -> control_structure .)
    LT              reduce using rule 18 (expr -> control_structure .)
    GT              reduce using rule 18 (expr -> control_structure .)
    LTE             reduce using rule 18 (expr -> control_structure .)
    GTE             reduce using rule 18 (expr -> control_structure .)
    LPAREN          reduce using rule 18 (expr -> control_structure .)
    NOT             reduce using rule 18 (expr -> control_structure .)
    INT             reduce using rule 18 (expr -> control_structure .)
    FLOAT           reduce using rule 18 (expr -> control_structure .)
    ID              reduce using rule 18 (expr -> control_structure .)
    STRING          reduce using rule 18 (expr -> control_structure .)
    WHILE           reduce using rule 18 (expr -> control_structure .)
    IF              reduce using rule 18 (expr -> control_structure .)
    TRUE            reduce using rule 18 (expr -> control_structure .)
    FALSE           reduce using rule 18 (expr -> control_structure .)
    END             reduce using rule 18 (expr -> control_structure .)
    RPAREN          reduce using rule 18 (expr -> control_structure .)
    ELSE            reduce using rule 18 (expr -> control_structure .)
    ELSIF           reduce using rule 18 (expr -> control_structure .)
    AND             reduce using rule 18 (expr -> control_structure .)
    OR              reduce using rule 18 (expr -> control_structure .)
    BODY            reduce using rule 18 (expr -> control_structure .)
    $end            reduce using rule 18 (expr -> control_structure .)
    THEN            reduce using rule 18 (expr -> control_structure .)
    DO              reduce using rule 18 (expr -> control_structure .)


state 27

    (20) expr -> aexpr .
    (36) aexpr -> aexpr . PLUS aexpr
    (37) aexpr -> aexpr . MINUS aexpr
    (38) aexpr -> aexpr . TIMES aexpr
    (39) aexpr -> aexpr . DIVIDED_BY aexpr

    EQUALS          reduce using rule 20 (expr -> aexpr .)
    LT              reduce using rule 20 (expr -> aexpr .)
    GT              reduce using rule 20 (expr -> aexpr .)
    LTE             reduce using rule 20 (expr -> aexpr .)
    GTE             reduce using rule 20 (expr -> aexpr .)
    LPAREN          reduce using rule 20 (expr -> aexpr .)
    NOT             reduce using rule 20 (expr -> aexpr .)
    INT             reduce using rule 20 (expr -> aexpr .)
    FLOAT           reduce using rule 20 (expr -> aexpr .)
    ID              reduce using rule 20 (expr -> aexpr .)
    STRING          reduce using rule 20 (expr -> aexpr .)
    WHILE           reduce using rule 20 (expr -> aexpr .)
    IF              reduce using rule 20 (expr -> aexpr .)
    TRUE            reduce using rule 20 (expr -> aexpr .)
    FALSE           reduce using rule 20 (expr -> aexpr .)
    END             reduce using rule 20 (expr -> aexpr .)
    RPAREN          reduce using rule 20 (expr -> aexpr .)
    ELSE            reduce using rule 20 (expr -> aexpr .)
    ELSIF           reduce using rule 20 (expr -> aexpr .)
    AND             reduce using rule 20 (expr -> aexpr .)
    OR              reduce using rule 20 (expr -> aexpr .)
    BODY            reduce using rule 20 (expr -> aexpr .)
    $end            reduce using rule 20 (expr -> aexpr .)
    THEN            reduce using rule 20 (expr -> aexpr .)
    DO              reduce using rule 20 (expr -> aexpr .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    TIMES           shift and go to state 55
    DIVIDED_BY      shift and go to state 54


state 28

    (10) preconditions -> bexpr . AND preconditions
    (11) preconditions -> bexpr .
    (43) bexpr -> bexpr . AND bexpr
    (44) bexpr -> bexpr . OR bexpr
    (19) expr -> bexpr .

    AND             shift and go to state 58
    BODY            reduce using rule 11 (preconditions -> bexpr .)
    OR              shift and go to state 59
    EQUALS          reduce using rule 19 (expr -> bexpr .)
    LT              reduce using rule 19 (expr -> bexpr .)
    GT              reduce using rule 19 (expr -> bexpr .)
    LTE             reduce using rule 19 (expr -> bexpr .)
    GTE             reduce using rule 19 (expr -> bexpr .)


state 29

    (21) expr -> string .

    EQUALS          reduce using rule 21 (expr -> string .)
    LT              reduce using rule 21 (expr -> string .)
    GT              reduce using rule 21 (expr -> string .)
    LTE             reduce using rule 21 (expr -> string .)
    GTE             reduce using rule 21 (expr -> string .)
    LPAREN          reduce using rule 21 (expr -> string .)
    NOT             reduce using rule 21 (expr -> string .)
    INT             reduce using rule 21 (expr -> string .)
    FLOAT           reduce using rule 21 (expr -> string .)
    ID              reduce using rule 21 (expr -> string .)
    STRING          reduce using rule 21 (expr -> string .)
    WHILE           reduce using rule 21 (expr -> string .)
    IF              reduce using rule 21 (expr -> string .)
    TRUE            reduce using rule 21 (expr -> string .)
    FALSE           reduce using rule 21 (expr -> string .)
    END             reduce using rule 21 (expr -> string .)
    RPAREN          reduce using rule 21 (expr -> string .)
    ELSE            reduce using rule 21 (expr -> string .)
    ELSIF           reduce using rule 21 (expr -> string .)
    AND             reduce using rule 21 (expr -> string .)
    OR              reduce using rule 21 (expr -> string .)
    BODY            reduce using rule 21 (expr -> string .)
    $end            reduce using rule 21 (expr -> string .)
    THEN            reduce using rule 21 (expr -> string .)
    DO              reduce using rule 21 (expr -> string .)


state 30

    (54) true -> TRUE .

    DO              reduce using rule 54 (true -> TRUE .)
    AND             reduce using rule 54 (true -> TRUE .)
    OR              reduce using rule 54 (true -> TRUE .)
    EQUALS          reduce using rule 54 (true -> TRUE .)
    LT              reduce using rule 54 (true -> TRUE .)
    GT              reduce using rule 54 (true -> TRUE .)
    LTE             reduce using rule 54 (true -> TRUE .)
    GTE             reduce using rule 54 (true -> TRUE .)
    BODY            reduce using rule 54 (true -> TRUE .)
    LPAREN          reduce using rule 54 (true -> TRUE .)
    NOT             reduce using rule 54 (true -> TRUE .)
    INT             reduce using rule 54 (true -> TRUE .)
    FLOAT           reduce using rule 54 (true -> TRUE .)
    ID              reduce using rule 54 (true -> TRUE .)
    STRING          reduce using rule 54 (true -> TRUE .)
    WHILE           reduce using rule 54 (true -> TRUE .)
    IF              reduce using rule 54 (true -> TRUE .)
    TRUE            reduce using rule 54 (true -> TRUE .)
    FALSE           reduce using rule 54 (true -> TRUE .)
    $end            reduce using rule 54 (true -> TRUE .)
    RPAREN          reduce using rule 54 (true -> TRUE .)
    THEN            reduce using rule 54 (true -> TRUE .)
    END             reduce using rule 54 (true -> TRUE .)
    ELSE            reduce using rule 54 (true -> TRUE .)
    ELSIF           reduce using rule 54 (true -> TRUE .)


state 31

    (56) string -> STRING .

    AND             reduce using rule 56 (string -> STRING .)
    OR              reduce using rule 56 (string -> STRING .)
    BODY            reduce using rule 56 (string -> STRING .)
    EQUALS          reduce using rule 56 (string -> STRING .)
    LT              reduce using rule 56 (string -> STRING .)
    GT              reduce using rule 56 (string -> STRING .)
    LTE             reduce using rule 56 (string -> STRING .)
    GTE             reduce using rule 56 (string -> STRING .)
    LPAREN          reduce using rule 56 (string -> STRING .)
    NOT             reduce using rule 56 (string -> STRING .)
    INT             reduce using rule 56 (string -> STRING .)
    FLOAT           reduce using rule 56 (string -> STRING .)
    ID              reduce using rule 56 (string -> STRING .)
    STRING          reduce using rule 56 (string -> STRING .)
    WHILE           reduce using rule 56 (string -> STRING .)
    IF              reduce using rule 56 (string -> STRING .)
    TRUE            reduce using rule 56 (string -> STRING .)
    FALSE           reduce using rule 56 (string -> STRING .)
    $end            reduce using rule 56 (string -> STRING .)
    RPAREN          reduce using rule 56 (string -> STRING .)
    THEN            reduce using rule 56 (string -> STRING .)
    DO              reduce using rule 56 (string -> STRING .)
    END             reduce using rule 56 (string -> STRING .)
    ELSE            reduce using rule 56 (string -> STRING .)
    ELSIF           reduce using rule 56 (string -> STRING .)


state 32

    (27) control_structure -> if_statement .

    EQUALS          reduce using rule 27 (control_structure -> if_statement .)
    LT              reduce using rule 27 (control_structure -> if_statement .)
    GT              reduce using rule 27 (control_structure -> if_statement .)
    LTE             reduce using rule 27 (control_structure -> if_statement .)
    GTE             reduce using rule 27 (control_structure -> if_statement .)
    RPAREN          reduce using rule 27 (control_structure -> if_statement .)
    LPAREN          reduce using rule 27 (control_structure -> if_statement .)
    NOT             reduce using rule 27 (control_structure -> if_statement .)
    INT             reduce using rule 27 (control_structure -> if_statement .)
    FLOAT           reduce using rule 27 (control_structure -> if_statement .)
    ID              reduce using rule 27 (control_structure -> if_statement .)
    STRING          reduce using rule 27 (control_structure -> if_statement .)
    WHILE           reduce using rule 27 (control_structure -> if_statement .)
    IF              reduce using rule 27 (control_structure -> if_statement .)
    TRUE            reduce using rule 27 (control_structure -> if_statement .)
    FALSE           reduce using rule 27 (control_structure -> if_statement .)
    $end            reduce using rule 27 (control_structure -> if_statement .)
    AND             reduce using rule 27 (control_structure -> if_statement .)
    OR              reduce using rule 27 (control_structure -> if_statement .)
    BODY            reduce using rule 27 (control_structure -> if_statement .)
    THEN            reduce using rule 27 (control_structure -> if_statement .)
    DO              reduce using rule 27 (control_structure -> if_statement .)
    END             reduce using rule 27 (control_structure -> if_statement .)
    ELSE            reduce using rule 27 (control_structure -> if_statement .)
    ELSIF           reduce using rule 27 (control_structure -> if_statement .)


state 33

    (26) control_structure -> while_loop .

    EQUALS          reduce using rule 26 (control_structure -> while_loop .)
    LT              reduce using rule 26 (control_structure -> while_loop .)
    GT              reduce using rule 26 (control_structure -> while_loop .)
    LTE             reduce using rule 26 (control_structure -> while_loop .)
    GTE             reduce using rule 26 (control_structure -> while_loop .)
    RPAREN          reduce using rule 26 (control_structure -> while_loop .)
    LPAREN          reduce using rule 26 (control_structure -> while_loop .)
    NOT             reduce using rule 26 (control_structure -> while_loop .)
    INT             reduce using rule 26 (control_structure -> while_loop .)
    FLOAT           reduce using rule 26 (control_structure -> while_loop .)
    ID              reduce using rule 26 (control_structure -> while_loop .)
    STRING          reduce using rule 26 (control_structure -> while_loop .)
    WHILE           reduce using rule 26 (control_structure -> while_loop .)
    IF              reduce using rule 26 (control_structure -> while_loop .)
    TRUE            reduce using rule 26 (control_structure -> while_loop .)
    FALSE           reduce using rule 26 (control_structure -> while_loop .)
    $end            reduce using rule 26 (control_structure -> while_loop .)
    AND             reduce using rule 26 (control_structure -> while_loop .)
    OR              reduce using rule 26 (control_structure -> while_loop .)
    BODY            reduce using rule 26 (control_structure -> while_loop .)
    THEN            reduce using rule 26 (control_structure -> while_loop .)
    DO              reduce using rule 26 (control_structure -> while_loop .)
    END             reduce using rule 26 (control_structure -> while_loop .)
    ELSE            reduce using rule 26 (control_structure -> while_loop .)
    ELSIF           reduce using rule 26 (control_structure -> while_loop .)


state 34

    (23) expr -> state_var_wr .

    EQUALS          reduce using rule 23 (expr -> state_var_wr .)
    LT              reduce using rule 23 (expr -> state_var_wr .)
    GT              reduce using rule 23 (expr -> state_var_wr .)
    LTE             reduce using rule 23 (expr -> state_var_wr .)
    GTE             reduce using rule 23 (expr -> state_var_wr .)
    LPAREN          reduce using rule 23 (expr -> state_var_wr .)
    NOT             reduce using rule 23 (expr -> state_var_wr .)
    INT             reduce using rule 23 (expr -> state_var_wr .)
    FLOAT           reduce using rule 23 (expr -> state_var_wr .)
    ID              reduce using rule 23 (expr -> state_var_wr .)
    STRING          reduce using rule 23 (expr -> state_var_wr .)
    WHILE           reduce using rule 23 (expr -> state_var_wr .)
    IF              reduce using rule 23 (expr -> state_var_wr .)
    TRUE            reduce using rule 23 (expr -> state_var_wr .)
    FALSE           reduce using rule 23 (expr -> state_var_wr .)
    END             reduce using rule 23 (expr -> state_var_wr .)
    RPAREN          reduce using rule 23 (expr -> state_var_wr .)
    ELSE            reduce using rule 23 (expr -> state_var_wr .)
    ELSIF           reduce using rule 23 (expr -> state_var_wr .)
    AND             reduce using rule 23 (expr -> state_var_wr .)
    OR              reduce using rule 23 (expr -> state_var_wr .)
    BODY            reduce using rule 23 (expr -> state_var_wr .)
    $end            reduce using rule 23 (expr -> state_var_wr .)
    THEN            reduce using rule 23 (expr -> state_var_wr .)
    DO              reduce using rule 23 (expr -> state_var_wr .)


state 35

    (24) expr -> loc_var_rd .

    EQUALS          reduce using rule 24 (expr -> loc_var_rd .)
    LT              reduce using rule 24 (expr -> loc_var_rd .)
    GT              reduce using rule 24 (expr -> loc_var_rd .)
    LTE             reduce using rule 24 (expr -> loc_var_rd .)
    GTE             reduce using rule 24 (expr -> loc_var_rd .)
    LPAREN          reduce using rule 24 (expr -> loc_var_rd .)
    NOT             reduce using rule 24 (expr -> loc_var_rd .)
    INT             reduce using rule 24 (expr -> loc_var_rd .)
    FLOAT           reduce using rule 24 (expr -> loc_var_rd .)
    ID              reduce using rule 24 (expr -> loc_var_rd .)
    STRING          reduce using rule 24 (expr -> loc_var_rd .)
    WHILE           reduce using rule 24 (expr -> loc_var_rd .)
    IF              reduce using rule 24 (expr -> loc_var_rd .)
    TRUE            reduce using rule 24 (expr -> loc_var_rd .)
    FALSE           reduce using rule 24 (expr -> loc_var_rd .)
    END             reduce using rule 24 (expr -> loc_var_rd .)
    RPAREN          reduce using rule 24 (expr -> loc_var_rd .)
    ELSE            reduce using rule 24 (expr -> loc_var_rd .)
    ELSIF           reduce using rule 24 (expr -> loc_var_rd .)
    AND             reduce using rule 24 (expr -> loc_var_rd .)
    OR              reduce using rule 24 (expr -> loc_var_rd .)
    BODY            reduce using rule 24 (expr -> loc_var_rd .)
    $end            reduce using rule 24 (expr -> loc_var_rd .)
    THEN            reduce using rule 24 (expr -> loc_var_rd .)
    DO              reduce using rule 24 (expr -> loc_var_rd .)


state 36

    (9) pre -> PRE COLON preconditions .

    BODY            reduce using rule 9 (pre -> PRE COLON preconditions .)


state 37

    (17) expr -> LPAREN . expr RPAREN
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END
    (54) true -> . TRUE
    (55) false -> . FALSE

    LPAREN          shift and go to state 37
    NOT             shift and go to state 46
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 51
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41

    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    true                           shift and go to state 38
    expr                           shift and go to state 60
    state_var_wr                   shift and go to state 34
    state_var_rd                   shift and go to state 49
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 50

state 38

    (51) bexpr -> true .

    AND             reduce using rule 51 (bexpr -> true .)
    OR              reduce using rule 51 (bexpr -> true .)
    EQUALS          reduce using rule 51 (bexpr -> true .)
    LT              reduce using rule 51 (bexpr -> true .)
    GT              reduce using rule 51 (bexpr -> true .)
    LTE             reduce using rule 51 (bexpr -> true .)
    GTE             reduce using rule 51 (bexpr -> true .)
    LPAREN          reduce using rule 51 (bexpr -> true .)
    NOT             reduce using rule 51 (bexpr -> true .)
    INT             reduce using rule 51 (bexpr -> true .)
    FLOAT           reduce using rule 51 (bexpr -> true .)
    ID              reduce using rule 51 (bexpr -> true .)
    STRING          reduce using rule 51 (bexpr -> true .)
    WHILE           reduce using rule 51 (bexpr -> true .)
    IF              reduce using rule 51 (bexpr -> true .)
    TRUE            reduce using rule 51 (bexpr -> true .)
    FALSE           reduce using rule 51 (bexpr -> true .)
    END             reduce using rule 51 (bexpr -> true .)
    ELSE            reduce using rule 51 (bexpr -> true .)
    ELSIF           reduce using rule 51 (bexpr -> true .)
    BODY            reduce using rule 51 (bexpr -> true .)
    $end            reduce using rule 51 (bexpr -> true .)
    RPAREN          reduce using rule 51 (bexpr -> true .)
    THEN            reduce using rule 51 (bexpr -> true .)
    DO              reduce using rule 51 (bexpr -> true .)


state 39

    (57) state_var_rd -> ID . LPAREN state_var_args RPAREN
    (42) aexpr -> ID .
    (58) state_var_wr -> ID . LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> ID .
    (64) loc_var_wr -> ID . ASSIGN expr

  ! reduce/reduce conflict for EQUALS resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for GT resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for LTE resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for GTE resolved using rule 42 (aexpr -> ID .)
    LPAREN          shift and go to state 61
    PLUS            reduce using rule 42 (aexpr -> ID .)
    MINUS           reduce using rule 42 (aexpr -> ID .)
    TIMES           reduce using rule 42 (aexpr -> ID .)
    DIVIDED_BY      reduce using rule 42 (aexpr -> ID .)
    EQUALS          reduce using rule 42 (aexpr -> ID .)
    LT              reduce using rule 42 (aexpr -> ID .)
    GT              reduce using rule 42 (aexpr -> ID .)
    LTE             reduce using rule 42 (aexpr -> ID .)
    GTE             reduce using rule 42 (aexpr -> ID .)
    ASSIGN          shift and go to state 62

  ! EQUALS          [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! LT              [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! GT              [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! LTE             [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! GTE             [ reduce using rule 63 (loc_var_rd -> ID .) ]


state 40

    (29) if_statement -> IF . bexpr THEN exprs END
    (30) if_statement -> IF . bexpr THEN exprs elsif_blocks END
    (31) if_statement -> IF . bexpr THEN exprs ELSE exprs END
    (32) if_statement -> IF . bexpr THEN exprs elsif_blocks ELSE exprs END
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (54) true -> . TRUE
    (55) false -> . FALSE
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END

    NOT             shift and go to state 46
    LPAREN          shift and go to state 37
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41
    ID              shift and go to state 39
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40

    false                          shift and go to state 23
    string                         shift and go to state 29
    control_structure              shift and go to state 26
    expr                           shift and go to state 43
    state_var_wr                   shift and go to state 34
    state_var_rd                   shift and go to state 24
    loc_var_rd                     shift and go to state 35
    while_loop                     shift and go to state 33
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    true                           shift and go to state 38
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 63

state 41

    (55) false -> FALSE .

    AND             reduce using rule 55 (false -> FALSE .)
    OR              reduce using rule 55 (false -> FALSE .)
    RPAREN          reduce using rule 55 (false -> FALSE .)
    EQUALS          reduce using rule 55 (false -> FALSE .)
    LT              reduce using rule 55 (false -> FALSE .)
    GT              reduce using rule 55 (false -> FALSE .)
    LTE             reduce using rule 55 (false -> FALSE .)
    GTE             reduce using rule 55 (false -> FALSE .)
    LPAREN          reduce using rule 55 (false -> FALSE .)
    NOT             reduce using rule 55 (false -> FALSE .)
    INT             reduce using rule 55 (false -> FALSE .)
    FLOAT           reduce using rule 55 (false -> FALSE .)
    ID              reduce using rule 55 (false -> FALSE .)
    STRING          reduce using rule 55 (false -> FALSE .)
    WHILE           reduce using rule 55 (false -> FALSE .)
    IF              reduce using rule 55 (false -> FALSE .)
    TRUE            reduce using rule 55 (false -> FALSE .)
    FALSE           reduce using rule 55 (false -> FALSE .)
    BODY            reduce using rule 55 (false -> FALSE .)
    $end            reduce using rule 55 (false -> FALSE .)
    THEN            reduce using rule 55 (false -> FALSE .)
    DO              reduce using rule 55 (false -> FALSE .)
    END             reduce using rule 55 (false -> FALSE .)
    ELSE            reduce using rule 55 (false -> FALSE .)
    ELSIF           reduce using rule 55 (false -> FALSE .)


state 42

    (40) aexpr -> INT .

    PLUS            reduce using rule 40 (aexpr -> INT .)
    MINUS           reduce using rule 40 (aexpr -> INT .)
    TIMES           reduce using rule 40 (aexpr -> INT .)
    DIVIDED_BY      reduce using rule 40 (aexpr -> INT .)
    EQUALS          reduce using rule 40 (aexpr -> INT .)
    LT              reduce using rule 40 (aexpr -> INT .)
    GT              reduce using rule 40 (aexpr -> INT .)
    LTE             reduce using rule 40 (aexpr -> INT .)
    GTE             reduce using rule 40 (aexpr -> INT .)
    AND             reduce using rule 40 (aexpr -> INT .)
    OR              reduce using rule 40 (aexpr -> INT .)
    BODY            reduce using rule 40 (aexpr -> INT .)
    LPAREN          reduce using rule 40 (aexpr -> INT .)
    NOT             reduce using rule 40 (aexpr -> INT .)
    INT             reduce using rule 40 (aexpr -> INT .)
    FLOAT           reduce using rule 40 (aexpr -> INT .)
    ID              reduce using rule 40 (aexpr -> INT .)
    STRING          reduce using rule 40 (aexpr -> INT .)
    WHILE           reduce using rule 40 (aexpr -> INT .)
    IF              reduce using rule 40 (aexpr -> INT .)
    TRUE            reduce using rule 40 (aexpr -> INT .)
    FALSE           reduce using rule 40 (aexpr -> INT .)
    $end            reduce using rule 40 (aexpr -> INT .)
    RPAREN          reduce using rule 40 (aexpr -> INT .)
    THEN            reduce using rule 40 (aexpr -> INT .)
    DO              reduce using rule 40 (aexpr -> INT .)
    END             reduce using rule 40 (aexpr -> INT .)
    ELSE            reduce using rule 40 (aexpr -> INT .)
    ELSIF           reduce using rule 40 (aexpr -> INT .)


state 43

    (45) bexpr -> expr . EQUALS expr
    (46) bexpr -> expr . LT expr
    (47) bexpr -> expr . GT expr
    (48) bexpr -> expr . LTE expr
    (49) bexpr -> expr . GTE expr

    EQUALS          shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 64
    LTE             shift and go to state 68
    GTE             shift and go to state 65


state 44

    (41) aexpr -> FLOAT .

    PLUS            reduce using rule 41 (aexpr -> FLOAT .)
    MINUS           reduce using rule 41 (aexpr -> FLOAT .)
    TIMES           reduce using rule 41 (aexpr -> FLOAT .)
    DIVIDED_BY      reduce using rule 41 (aexpr -> FLOAT .)
    EQUALS          reduce using rule 41 (aexpr -> FLOAT .)
    LT              reduce using rule 41 (aexpr -> FLOAT .)
    GT              reduce using rule 41 (aexpr -> FLOAT .)
    LTE             reduce using rule 41 (aexpr -> FLOAT .)
    GTE             reduce using rule 41 (aexpr -> FLOAT .)
    AND             reduce using rule 41 (aexpr -> FLOAT .)
    OR              reduce using rule 41 (aexpr -> FLOAT .)
    BODY            reduce using rule 41 (aexpr -> FLOAT .)
    LPAREN          reduce using rule 41 (aexpr -> FLOAT .)
    NOT             reduce using rule 41 (aexpr -> FLOAT .)
    INT             reduce using rule 41 (aexpr -> FLOAT .)
    FLOAT           reduce using rule 41 (aexpr -> FLOAT .)
    ID              reduce using rule 41 (aexpr -> FLOAT .)
    STRING          reduce using rule 41 (aexpr -> FLOAT .)
    WHILE           reduce using rule 41 (aexpr -> FLOAT .)
    IF              reduce using rule 41 (aexpr -> FLOAT .)
    TRUE            reduce using rule 41 (aexpr -> FLOAT .)
    FALSE           reduce using rule 41 (aexpr -> FLOAT .)
    $end            reduce using rule 41 (aexpr -> FLOAT .)
    RPAREN          reduce using rule 41 (aexpr -> FLOAT .)
    THEN            reduce using rule 41 (aexpr -> FLOAT .)
    DO              reduce using rule 41 (aexpr -> FLOAT .)
    END             reduce using rule 41 (aexpr -> FLOAT .)
    ELSE            reduce using rule 41 (aexpr -> FLOAT .)
    ELSIF           reduce using rule 41 (aexpr -> FLOAT .)


state 45

    (28) while_loop -> WHILE . bexpr DO exprs END
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (54) true -> . TRUE
    (55) false -> . FALSE
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END

    NOT             shift and go to state 46
    LPAREN          shift and go to state 37
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41
    ID              shift and go to state 39
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40

    false                          shift and go to state 23
    string                         shift and go to state 29
    control_structure              shift and go to state 26
    expr                           shift and go to state 43
    state_var_wr                   shift and go to state 34
    state_var_rd                   shift and go to state 24
    loc_var_rd                     shift and go to state 35
    while_loop                     shift and go to state 33
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    true                           shift and go to state 38
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 69

state 46

    (50) bexpr -> NOT . bexpr
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (54) true -> . TRUE
    (55) false -> . FALSE
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END

    NOT             shift and go to state 46
    LPAREN          shift and go to state 37
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41
    ID              shift and go to state 39
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40

    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    true                           shift and go to state 38
    expr                           shift and go to state 43
    state_var_wr                   shift and go to state 34
    state_var_rd                   shift and go to state 24
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 70

state 47

    (8) task -> TASK COLON ID LPAREN . params RPAREN
    (5) params -> . ID COMMA params
    (6) params -> . ID
    (7) params -> .

    ID              shift and go to state 8
    RPAREN          reduce using rule 7 (params -> .)

    params                         shift and go to state 71

state 48

    (14) exprs -> LPAREN . exprs RPAREN
    (17) expr -> LPAREN . expr RPAREN
    (14) exprs -> . LPAREN exprs RPAREN
    (15) exprs -> . expr exprs
    (16) exprs -> .
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END
    (54) true -> . TRUE
    (55) false -> . FALSE

    LPAREN          shift and go to state 48
    RPAREN          reduce using rule 16 (exprs -> .)
    NOT             shift and go to state 46
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 51
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41

    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    true                           shift and go to state 38
    expr                           shift and go to state 72
    state_var_wr                   shift and go to state 34
    exprs                          shift and go to state 73
    state_var_rd                   shift and go to state 49
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 50

state 49

    (22) expr -> state_var_rd .
    (53) bexpr -> state_var_rd .

  ! reduce/reduce conflict for AND resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for OR resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for EQUALS resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for LT resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for GT resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for LTE resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for GTE resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for LPAREN resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for NOT resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for INT resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for FLOAT resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for ID resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for STRING resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for WHILE resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for IF resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for TRUE resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for FALSE resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for END resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for ELSE resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for ELSIF resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for BODY resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for $end resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for RPAREN resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for THEN resolved using rule 22 (expr -> state_var_rd .)
  ! reduce/reduce conflict for DO resolved using rule 22 (expr -> state_var_rd .)
    EQUALS          reduce using rule 22 (expr -> state_var_rd .)
    LT              reduce using rule 22 (expr -> state_var_rd .)
    GT              reduce using rule 22 (expr -> state_var_rd .)
    LTE             reduce using rule 22 (expr -> state_var_rd .)
    GTE             reduce using rule 22 (expr -> state_var_rd .)
    LPAREN          reduce using rule 22 (expr -> state_var_rd .)
    NOT             reduce using rule 22 (expr -> state_var_rd .)
    INT             reduce using rule 22 (expr -> state_var_rd .)
    FLOAT           reduce using rule 22 (expr -> state_var_rd .)
    ID              reduce using rule 22 (expr -> state_var_rd .)
    STRING          reduce using rule 22 (expr -> state_var_rd .)
    WHILE           reduce using rule 22 (expr -> state_var_rd .)
    IF              reduce using rule 22 (expr -> state_var_rd .)
    TRUE            reduce using rule 22 (expr -> state_var_rd .)
    FALSE           reduce using rule 22 (expr -> state_var_rd .)
    END             reduce using rule 22 (expr -> state_var_rd .)
    RPAREN          reduce using rule 22 (expr -> state_var_rd .)
    ELSE            reduce using rule 22 (expr -> state_var_rd .)
    ELSIF           reduce using rule 22 (expr -> state_var_rd .)
    AND             reduce using rule 22 (expr -> state_var_rd .)
    OR              reduce using rule 22 (expr -> state_var_rd .)
    BODY            reduce using rule 22 (expr -> state_var_rd .)
    $end            reduce using rule 22 (expr -> state_var_rd .)
    THEN            reduce using rule 22 (expr -> state_var_rd .)
    DO              reduce using rule 22 (expr -> state_var_rd .)

  ! AND             [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! OR              [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! EQUALS          [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! LT              [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! GT              [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! LTE             [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! GTE             [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! LPAREN          [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! NOT             [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! INT             [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! FLOAT           [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! ID              [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! STRING          [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! WHILE           [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! IF              [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! TRUE            [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! FALSE           [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! END             [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! ELSE            [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! ELSIF           [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! BODY            [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! $end            [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! RPAREN          [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! THEN            [ reduce using rule 53 (bexpr -> state_var_rd .) ]
  ! DO              [ reduce using rule 53 (bexpr -> state_var_rd .) ]


state 50

    (19) expr -> bexpr .
    (43) bexpr -> bexpr . AND bexpr
    (44) bexpr -> bexpr . OR bexpr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    EQUALS          reduce using rule 19 (expr -> bexpr .)
    LT              reduce using rule 19 (expr -> bexpr .)
    GT              reduce using rule 19 (expr -> bexpr .)
    LTE             reduce using rule 19 (expr -> bexpr .)
    GTE             reduce using rule 19 (expr -> bexpr .)
    LPAREN          reduce using rule 19 (expr -> bexpr .)
    NOT             reduce using rule 19 (expr -> bexpr .)
    INT             reduce using rule 19 (expr -> bexpr .)
    FLOAT           reduce using rule 19 (expr -> bexpr .)
    ID              reduce using rule 19 (expr -> bexpr .)
    STRING          reduce using rule 19 (expr -> bexpr .)
    WHILE           reduce using rule 19 (expr -> bexpr .)
    IF              reduce using rule 19 (expr -> bexpr .)
    TRUE            reduce using rule 19 (expr -> bexpr .)
    FALSE           reduce using rule 19 (expr -> bexpr .)
    END             reduce using rule 19 (expr -> bexpr .)
    RPAREN          reduce using rule 19 (expr -> bexpr .)
    ELSE            reduce using rule 19 (expr -> bexpr .)
    ELSIF           reduce using rule 19 (expr -> bexpr .)
    BODY            reduce using rule 19 (expr -> bexpr .)
    $end            reduce using rule 19 (expr -> bexpr .)
    THEN            reduce using rule 19 (expr -> bexpr .)
    DO              reduce using rule 19 (expr -> bexpr .)
    AND             shift and go to state 74
    OR              shift and go to state 59

  ! AND             [ reduce using rule 19 (expr -> bexpr .) ]
  ! OR              [ reduce using rule 19 (expr -> bexpr .) ]


state 51

    (42) aexpr -> ID .
    (57) state_var_rd -> ID . LPAREN state_var_args RPAREN
    (58) state_var_wr -> ID . LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> ID .
    (64) loc_var_wr -> ID . ASSIGN expr

  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for EQUALS resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for GT resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for LTE resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for GTE resolved using rule 42 (aexpr -> ID .)
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for NOT resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for INT resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for STRING resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for TRUE resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for FALSE resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for END resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for BODY resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for THEN resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 42 (aexpr -> ID .)
  ! reduce/reduce conflict for ELSIF resolved using rule 42 (aexpr -> ID .)
    PLUS            reduce using rule 42 (aexpr -> ID .)
    MINUS           reduce using rule 42 (aexpr -> ID .)
    TIMES           reduce using rule 42 (aexpr -> ID .)
    DIVIDED_BY      reduce using rule 42 (aexpr -> ID .)
    AND             reduce using rule 42 (aexpr -> ID .)
    OR              reduce using rule 42 (aexpr -> ID .)
    BODY            reduce using rule 42 (aexpr -> ID .)
    EQUALS          reduce using rule 42 (aexpr -> ID .)
    LT              reduce using rule 42 (aexpr -> ID .)
    GT              reduce using rule 42 (aexpr -> ID .)
    LTE             reduce using rule 42 (aexpr -> ID .)
    GTE             reduce using rule 42 (aexpr -> ID .)
    NOT             reduce using rule 42 (aexpr -> ID .)
    INT             reduce using rule 42 (aexpr -> ID .)
    FLOAT           reduce using rule 42 (aexpr -> ID .)
    ID              reduce using rule 42 (aexpr -> ID .)
    STRING          reduce using rule 42 (aexpr -> ID .)
    WHILE           reduce using rule 42 (aexpr -> ID .)
    IF              reduce using rule 42 (aexpr -> ID .)
    TRUE            reduce using rule 42 (aexpr -> ID .)
    FALSE           reduce using rule 42 (aexpr -> ID .)
    $end            reduce using rule 42 (aexpr -> ID .)
    RPAREN          reduce using rule 42 (aexpr -> ID .)
    THEN            reduce using rule 42 (aexpr -> ID .)
    DO              reduce using rule 42 (aexpr -> ID .)
    END             reduce using rule 42 (aexpr -> ID .)
    ELSE            reduce using rule 42 (aexpr -> ID .)
    ELSIF           reduce using rule 42 (aexpr -> ID .)
    LPAREN          shift and go to state 61
    ASSIGN          shift and go to state 62

  ! LPAREN          [ reduce using rule 42 (aexpr -> ID .) ]
  ! EQUALS          [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! LT              [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! GT              [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! LTE             [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! GTE             [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! LPAREN          [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! NOT             [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! INT             [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! FLOAT           [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! ID              [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! STRING          [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! WHILE           [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! IF              [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! TRUE            [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! FALSE           [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! $end            [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! END             [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! AND             [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! OR              [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! BODY            [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! RPAREN          [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! THEN            [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! DO              [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! ELSE            [ reduce using rule 63 (loc_var_rd -> ID .) ]
  ! ELSIF           [ reduce using rule 63 (loc_var_rd -> ID .) ]


state 52

    (15) exprs -> expr . exprs
    (45) bexpr -> expr . EQUALS expr
    (46) bexpr -> expr . LT expr
    (47) bexpr -> expr . GT expr
    (48) bexpr -> expr . LTE expr
    (49) bexpr -> expr . GTE expr
    (14) exprs -> . LPAREN exprs RPAREN
    (15) exprs -> . expr exprs
    (16) exprs -> .
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END
    (54) true -> . TRUE
    (55) false -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
    EQUALS          shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 64
    LTE             shift and go to state 68
    GTE             shift and go to state 65
    LPAREN          shift and go to state 48
    $end            reduce using rule 16 (exprs -> .)
    RPAREN          reduce using rule 16 (exprs -> .)
    END             reduce using rule 16 (exprs -> .)
    ELSE            reduce using rule 16 (exprs -> .)
    ELSIF           reduce using rule 16 (exprs -> .)
    NOT             shift and go to state 46
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 51
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41

  ! ID              [ reduce using rule 16 (exprs -> .) ]

    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    true                           shift and go to state 38
    expr                           shift and go to state 52
    state_var_wr                   shift and go to state 34
    exprs                          shift and go to state 75
    state_var_rd                   shift and go to state 49
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 50

state 53

    (13) body -> BODY COLON exprs .

    ID              reduce using rule 13 (body -> BODY COLON exprs .)
    $end            reduce using rule 13 (body -> BODY COLON exprs .)


state 54

    (39) aexpr -> aexpr DIVIDED_BY . aexpr
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID

    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 76

    aexpr                          shift and go to state 77

state 55

    (38) aexpr -> aexpr TIMES . aexpr
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID

    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 76

    aexpr                          shift and go to state 78

state 56

    (36) aexpr -> aexpr PLUS . aexpr
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID

    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 76

    aexpr                          shift and go to state 79

state 57

    (37) aexpr -> aexpr MINUS . aexpr
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID

    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 76

    aexpr                          shift and go to state 80

state 58

    (10) preconditions -> bexpr AND . preconditions
    (43) bexpr -> bexpr AND . bexpr
    (10) preconditions -> . bexpr AND preconditions
    (11) preconditions -> . bexpr
    (12) preconditions -> .
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (54) true -> . TRUE
    (55) false -> . FALSE
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END

    BODY            reduce using rule 12 (preconditions -> .)
    NOT             shift and go to state 46
    LPAREN          shift and go to state 37
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41
    ID              shift and go to state 39
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40

    while_loop                     shift and go to state 33
    false                          shift and go to state 23
    string                         shift and go to state 29
    control_structure              shift and go to state 26
    expr                           shift and go to state 43
    state_var_wr                   shift and go to state 34
    state_var_rd                   shift and go to state 24
    loc_var_rd                     shift and go to state 35
    preconditions                  shift and go to state 82
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    true                           shift and go to state 38
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 81

state 59

    (44) bexpr -> bexpr OR . bexpr
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (54) true -> . TRUE
    (55) false -> . FALSE
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END

    NOT             shift and go to state 46
    LPAREN          shift and go to state 37
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41
    ID              shift and go to state 39
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40

    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    true                           shift and go to state 38
    expr                           shift and go to state 43
    state_var_wr                   shift and go to state 34
    state_var_rd                   shift and go to state 24
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 83

state 60

    (17) expr -> LPAREN expr . RPAREN
    (45) bexpr -> expr . EQUALS expr
    (46) bexpr -> expr . LT expr
    (47) bexpr -> expr . GT expr
    (48) bexpr -> expr . LTE expr
    (49) bexpr -> expr . GTE expr

    RPAREN          shift and go to state 84
    EQUALS          shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 64
    LTE             shift and go to state 68
    GTE             shift and go to state 65


state 61

    (57) state_var_rd -> ID LPAREN . state_var_args RPAREN
    (58) state_var_wr -> ID LPAREN . state_var_args RPAREN ASSIGN expr
    (59) state_var_args -> . state_var_arg COMMA state_var_args
    (60) state_var_args -> . state_var_arg
    (61) state_var_arg -> . state_var_rd
    (62) state_var_arg -> . ID
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN

    ID              shift and go to state 85

    state_var_rd                   shift and go to state 86
    state_var_args                 shift and go to state 87
    state_var_arg                  shift and go to state 88

state 62

    (64) loc_var_wr -> ID ASSIGN . expr
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END
    (54) true -> . TRUE
    (55) false -> . FALSE

    LPAREN          shift and go to state 37
    NOT             shift and go to state 46
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 51
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41

    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    true                           shift and go to state 38
    expr                           shift and go to state 89
    state_var_wr                   shift and go to state 34
    state_var_rd                   shift and go to state 49
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 50

state 63

    (29) if_statement -> IF bexpr . THEN exprs END
    (30) if_statement -> IF bexpr . THEN exprs elsif_blocks END
    (31) if_statement -> IF bexpr . THEN exprs ELSE exprs END
    (32) if_statement -> IF bexpr . THEN exprs elsif_blocks ELSE exprs END
    (43) bexpr -> bexpr . AND bexpr
    (44) bexpr -> bexpr . OR bexpr
    (19) expr -> bexpr .

    THEN            shift and go to state 90
    AND             shift and go to state 74
    OR              shift and go to state 59
    EQUALS          reduce using rule 19 (expr -> bexpr .)
    LT              reduce using rule 19 (expr -> bexpr .)
    GT              reduce using rule 19 (expr -> bexpr .)
    LTE             reduce using rule 19 (expr -> bexpr .)
    GTE             reduce using rule 19 (expr -> bexpr .)


state 64

    (47) bexpr -> expr GT . expr
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END
    (54) true -> . TRUE
    (55) false -> . FALSE

    LPAREN          shift and go to state 37
    NOT             shift and go to state 46
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 51
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41

    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    true                           shift and go to state 38
    expr                           shift and go to state 91
    state_var_wr                   shift and go to state 34
    state_var_rd                   shift and go to state 49
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 50

state 65

    (49) bexpr -> expr GTE . expr
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END
    (54) true -> . TRUE
    (55) false -> . FALSE

    LPAREN          shift and go to state 37
    NOT             shift and go to state 46
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 51
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41

    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    true                           shift and go to state 38
    expr                           shift and go to state 92
    state_var_wr                   shift and go to state 34
    state_var_rd                   shift and go to state 49
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 50

state 66

    (45) bexpr -> expr EQUALS . expr
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END
    (54) true -> . TRUE
    (55) false -> . FALSE

    LPAREN          shift and go to state 37
    NOT             shift and go to state 46
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 51
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41

    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    true                           shift and go to state 38
    expr                           shift and go to state 93
    state_var_wr                   shift and go to state 34
    state_var_rd                   shift and go to state 49
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 50

state 67

    (46) bexpr -> expr LT . expr
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END
    (54) true -> . TRUE
    (55) false -> . FALSE

    LPAREN          shift and go to state 37
    NOT             shift and go to state 46
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 51
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41

    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    true                           shift and go to state 38
    expr                           shift and go to state 94
    state_var_wr                   shift and go to state 34
    state_var_rd                   shift and go to state 49
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 50

state 68

    (48) bexpr -> expr LTE . expr
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END
    (54) true -> . TRUE
    (55) false -> . FALSE

    LPAREN          shift and go to state 37
    NOT             shift and go to state 46
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 51
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41

    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    true                           shift and go to state 38
    expr                           shift and go to state 95
    state_var_wr                   shift and go to state 34
    state_var_rd                   shift and go to state 49
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 50

state 69

    (28) while_loop -> WHILE bexpr . DO exprs END
    (43) bexpr -> bexpr . AND bexpr
    (44) bexpr -> bexpr . OR bexpr
    (19) expr -> bexpr .

    DO              shift and go to state 96
    AND             shift and go to state 74
    OR              shift and go to state 59
    EQUALS          reduce using rule 19 (expr -> bexpr .)
    LT              reduce using rule 19 (expr -> bexpr .)
    GT              reduce using rule 19 (expr -> bexpr .)
    LTE             reduce using rule 19 (expr -> bexpr .)
    GTE             reduce using rule 19 (expr -> bexpr .)


state 70

    (50) bexpr -> NOT bexpr .
    (43) bexpr -> bexpr . AND bexpr
    (44) bexpr -> bexpr . OR bexpr
    (19) expr -> bexpr .

  ! reduce/reduce conflict for EQUALS resolved using rule 19 (expr -> bexpr .)
  ! reduce/reduce conflict for LT resolved using rule 19 (expr -> bexpr .)
  ! reduce/reduce conflict for GT resolved using rule 19 (expr -> bexpr .)
  ! reduce/reduce conflict for LTE resolved using rule 19 (expr -> bexpr .)
  ! reduce/reduce conflict for GTE resolved using rule 19 (expr -> bexpr .)
    AND             reduce using rule 50 (bexpr -> NOT bexpr .)
    OR              reduce using rule 50 (bexpr -> NOT bexpr .)
    LPAREN          reduce using rule 50 (bexpr -> NOT bexpr .)
    NOT             reduce using rule 50 (bexpr -> NOT bexpr .)
    INT             reduce using rule 50 (bexpr -> NOT bexpr .)
    FLOAT           reduce using rule 50 (bexpr -> NOT bexpr .)
    ID              reduce using rule 50 (bexpr -> NOT bexpr .)
    STRING          reduce using rule 50 (bexpr -> NOT bexpr .)
    WHILE           reduce using rule 50 (bexpr -> NOT bexpr .)
    IF              reduce using rule 50 (bexpr -> NOT bexpr .)
    TRUE            reduce using rule 50 (bexpr -> NOT bexpr .)
    FALSE           reduce using rule 50 (bexpr -> NOT bexpr .)
    END             reduce using rule 50 (bexpr -> NOT bexpr .)
    ELSE            reduce using rule 50 (bexpr -> NOT bexpr .)
    ELSIF           reduce using rule 50 (bexpr -> NOT bexpr .)
    BODY            reduce using rule 50 (bexpr -> NOT bexpr .)
    $end            reduce using rule 50 (bexpr -> NOT bexpr .)
    RPAREN          reduce using rule 50 (bexpr -> NOT bexpr .)
    THEN            reduce using rule 50 (bexpr -> NOT bexpr .)
    DO              reduce using rule 50 (bexpr -> NOT bexpr .)
    EQUALS          reduce using rule 19 (expr -> bexpr .)
    LT              reduce using rule 19 (expr -> bexpr .)
    GT              reduce using rule 19 (expr -> bexpr .)
    LTE             reduce using rule 19 (expr -> bexpr .)
    GTE             reduce using rule 19 (expr -> bexpr .)

  ! EQUALS          [ reduce using rule 50 (bexpr -> NOT bexpr .) ]
  ! LT              [ reduce using rule 50 (bexpr -> NOT bexpr .) ]
  ! GT              [ reduce using rule 50 (bexpr -> NOT bexpr .) ]
  ! LTE             [ reduce using rule 50 (bexpr -> NOT bexpr .) ]
  ! GTE             [ reduce using rule 50 (bexpr -> NOT bexpr .) ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 59 ]


state 71

    (8) task -> TASK COLON ID LPAREN params . RPAREN

    RPAREN          shift and go to state 97


state 72

    (17) expr -> LPAREN expr . RPAREN
    (15) exprs -> expr . exprs
    (45) bexpr -> expr . EQUALS expr
    (46) bexpr -> expr . LT expr
    (47) bexpr -> expr . GT expr
    (48) bexpr -> expr . LTE expr
    (49) bexpr -> expr . GTE expr
    (14) exprs -> . LPAREN exprs RPAREN
    (15) exprs -> . expr exprs
    (16) exprs -> .
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END
    (54) true -> . TRUE
    (55) false -> . FALSE

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 84
    EQUALS          shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 64
    LTE             shift and go to state 68
    GTE             shift and go to state 65
    LPAREN          shift and go to state 48
    NOT             shift and go to state 46
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 51
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41

  ! RPAREN          [ reduce using rule 16 (exprs -> .) ]

    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    true                           shift and go to state 38
    expr                           shift and go to state 52
    state_var_wr                   shift and go to state 34
    exprs                          shift and go to state 75
    state_var_rd                   shift and go to state 49
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 50

state 73

    (14) exprs -> LPAREN exprs . RPAREN

    RPAREN          shift and go to state 98


state 74

    (43) bexpr -> bexpr AND . bexpr
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (54) true -> . TRUE
    (55) false -> . FALSE
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END

    NOT             shift and go to state 46
    LPAREN          shift and go to state 37
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41
    ID              shift and go to state 39
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40

    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    true                           shift and go to state 38
    expr                           shift and go to state 43
    state_var_wr                   shift and go to state 34
    state_var_rd                   shift and go to state 24
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 99

state 75

    (15) exprs -> expr exprs .

    END             reduce using rule 15 (exprs -> expr exprs .)
    ELSE            reduce using rule 15 (exprs -> expr exprs .)
    ELSIF           reduce using rule 15 (exprs -> expr exprs .)
    RPAREN          reduce using rule 15 (exprs -> expr exprs .)
    ID              reduce using rule 15 (exprs -> expr exprs .)
    $end            reduce using rule 15 (exprs -> expr exprs .)


state 76

    (42) aexpr -> ID .

    PLUS            reduce using rule 42 (aexpr -> ID .)
    MINUS           reduce using rule 42 (aexpr -> ID .)
    TIMES           reduce using rule 42 (aexpr -> ID .)
    DIVIDED_BY      reduce using rule 42 (aexpr -> ID .)
    EQUALS          reduce using rule 42 (aexpr -> ID .)
    LT              reduce using rule 42 (aexpr -> ID .)
    GT              reduce using rule 42 (aexpr -> ID .)
    LTE             reduce using rule 42 (aexpr -> ID .)
    GTE             reduce using rule 42 (aexpr -> ID .)
    LPAREN          reduce using rule 42 (aexpr -> ID .)
    NOT             reduce using rule 42 (aexpr -> ID .)
    INT             reduce using rule 42 (aexpr -> ID .)
    FLOAT           reduce using rule 42 (aexpr -> ID .)
    ID              reduce using rule 42 (aexpr -> ID .)
    STRING          reduce using rule 42 (aexpr -> ID .)
    WHILE           reduce using rule 42 (aexpr -> ID .)
    IF              reduce using rule 42 (aexpr -> ID .)
    TRUE            reduce using rule 42 (aexpr -> ID .)
    FALSE           reduce using rule 42 (aexpr -> ID .)
    $end            reduce using rule 42 (aexpr -> ID .)
    RPAREN          reduce using rule 42 (aexpr -> ID .)
    END             reduce using rule 42 (aexpr -> ID .)
    ELSE            reduce using rule 42 (aexpr -> ID .)
    ELSIF           reduce using rule 42 (aexpr -> ID .)
    AND             reduce using rule 42 (aexpr -> ID .)
    OR              reduce using rule 42 (aexpr -> ID .)
    BODY            reduce using rule 42 (aexpr -> ID .)
    THEN            reduce using rule 42 (aexpr -> ID .)
    DO              reduce using rule 42 (aexpr -> ID .)


state 77

    (39) aexpr -> aexpr DIVIDED_BY aexpr .
    (36) aexpr -> aexpr . PLUS aexpr
    (37) aexpr -> aexpr . MINUS aexpr
    (38) aexpr -> aexpr . TIMES aexpr
    (39) aexpr -> aexpr . DIVIDED_BY aexpr

    PLUS            reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    MINUS           reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    TIMES           reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    DIVIDED_BY      reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    EQUALS          reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    LT              reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    GT              reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    LTE             reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    GTE             reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    AND             reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    OR              reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    BODY            reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    LPAREN          reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    NOT             reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    INT             reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    FLOAT           reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    ID              reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    STRING          reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    WHILE           reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    IF              reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    TRUE            reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    FALSE           reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    $end            reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    RPAREN          reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    THEN            reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    DO              reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    END             reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    ELSE            reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)
    ELSIF           reduce using rule 39 (aexpr -> aexpr DIVIDED_BY aexpr .)

  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 57 ]
  ! TIMES           [ shift and go to state 55 ]
  ! DIVIDED_BY      [ shift and go to state 54 ]


state 78

    (38) aexpr -> aexpr TIMES aexpr .
    (36) aexpr -> aexpr . PLUS aexpr
    (37) aexpr -> aexpr . MINUS aexpr
    (38) aexpr -> aexpr . TIMES aexpr
    (39) aexpr -> aexpr . DIVIDED_BY aexpr

    PLUS            reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    MINUS           reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    TIMES           reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    DIVIDED_BY      reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    EQUALS          reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    LT              reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    GT              reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    LTE             reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    GTE             reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    AND             reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    OR              reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    BODY            reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    LPAREN          reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    NOT             reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    INT             reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    FLOAT           reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    ID              reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    STRING          reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    WHILE           reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    IF              reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    TRUE            reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    FALSE           reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    $end            reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    RPAREN          reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    THEN            reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    DO              reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    END             reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    ELSE            reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)
    ELSIF           reduce using rule 38 (aexpr -> aexpr TIMES aexpr .)

  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 57 ]
  ! TIMES           [ shift and go to state 55 ]
  ! DIVIDED_BY      [ shift and go to state 54 ]


state 79

    (36) aexpr -> aexpr PLUS aexpr .
    (36) aexpr -> aexpr . PLUS aexpr
    (37) aexpr -> aexpr . MINUS aexpr
    (38) aexpr -> aexpr . TIMES aexpr
    (39) aexpr -> aexpr . DIVIDED_BY aexpr

    PLUS            reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    MINUS           reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    EQUALS          reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    LT              reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    GT              reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    LTE             reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    GTE             reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    AND             reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    OR              reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    BODY            reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    LPAREN          reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    NOT             reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    INT             reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    FLOAT           reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    ID              reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    STRING          reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    WHILE           reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    IF              reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    TRUE            reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    FALSE           reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    $end            reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    RPAREN          reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    THEN            reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    DO              reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    END             reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    ELSE            reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    ELSIF           reduce using rule 36 (aexpr -> aexpr PLUS aexpr .)
    TIMES           shift and go to state 55
    DIVIDED_BY      shift and go to state 54

  ! TIMES           [ reduce using rule 36 (aexpr -> aexpr PLUS aexpr .) ]
  ! DIVIDED_BY      [ reduce using rule 36 (aexpr -> aexpr PLUS aexpr .) ]
  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 57 ]


state 80

    (37) aexpr -> aexpr MINUS aexpr .
    (36) aexpr -> aexpr . PLUS aexpr
    (37) aexpr -> aexpr . MINUS aexpr
    (38) aexpr -> aexpr . TIMES aexpr
    (39) aexpr -> aexpr . DIVIDED_BY aexpr

    PLUS            reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    MINUS           reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    EQUALS          reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    LT              reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    GT              reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    LTE             reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    GTE             reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    AND             reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    OR              reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    BODY            reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    LPAREN          reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    NOT             reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    INT             reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    FLOAT           reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    ID              reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    STRING          reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    WHILE           reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    IF              reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    TRUE            reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    FALSE           reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    $end            reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    RPAREN          reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    THEN            reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    DO              reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    END             reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    ELSE            reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    ELSIF           reduce using rule 37 (aexpr -> aexpr MINUS aexpr .)
    TIMES           shift and go to state 55
    DIVIDED_BY      shift and go to state 54

  ! TIMES           [ reduce using rule 37 (aexpr -> aexpr MINUS aexpr .) ]
  ! DIVIDED_BY      [ reduce using rule 37 (aexpr -> aexpr MINUS aexpr .) ]
  ! PLUS            [ shift and go to state 56 ]
  ! MINUS           [ shift and go to state 57 ]


state 81

    (43) bexpr -> bexpr AND bexpr .
    (10) preconditions -> bexpr . AND preconditions
    (11) preconditions -> bexpr .
    (43) bexpr -> bexpr . AND bexpr
    (44) bexpr -> bexpr . OR bexpr
    (19) expr -> bexpr .

  ! reduce/reduce conflict for BODY resolved using rule 11 (preconditions -> bexpr .)
  ! reduce/reduce conflict for EQUALS resolved using rule 19 (expr -> bexpr .)
  ! reduce/reduce conflict for LT resolved using rule 19 (expr -> bexpr .)
  ! reduce/reduce conflict for GT resolved using rule 19 (expr -> bexpr .)
  ! reduce/reduce conflict for LTE resolved using rule 19 (expr -> bexpr .)
  ! reduce/reduce conflict for GTE resolved using rule 19 (expr -> bexpr .)
    AND             reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    OR              reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    BODY            reduce using rule 11 (preconditions -> bexpr .)
    EQUALS          reduce using rule 19 (expr -> bexpr .)
    LT              reduce using rule 19 (expr -> bexpr .)
    GT              reduce using rule 19 (expr -> bexpr .)
    LTE             reduce using rule 19 (expr -> bexpr .)
    GTE             reduce using rule 19 (expr -> bexpr .)

  ! BODY            [ reduce using rule 43 (bexpr -> bexpr AND bexpr .) ]
  ! EQUALS          [ reduce using rule 43 (bexpr -> bexpr AND bexpr .) ]
  ! LT              [ reduce using rule 43 (bexpr -> bexpr AND bexpr .) ]
  ! GT              [ reduce using rule 43 (bexpr -> bexpr AND bexpr .) ]
  ! LTE             [ reduce using rule 43 (bexpr -> bexpr AND bexpr .) ]
  ! GTE             [ reduce using rule 43 (bexpr -> bexpr AND bexpr .) ]
  ! AND             [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]


state 82

    (10) preconditions -> bexpr AND preconditions .

    BODY            reduce using rule 10 (preconditions -> bexpr AND preconditions .)


state 83

    (44) bexpr -> bexpr OR bexpr .
    (43) bexpr -> bexpr . AND bexpr
    (44) bexpr -> bexpr . OR bexpr
    (19) expr -> bexpr .

  ! reduce/reduce conflict for EQUALS resolved using rule 19 (expr -> bexpr .)
  ! reduce/reduce conflict for LT resolved using rule 19 (expr -> bexpr .)
  ! reduce/reduce conflict for GT resolved using rule 19 (expr -> bexpr .)
  ! reduce/reduce conflict for LTE resolved using rule 19 (expr -> bexpr .)
  ! reduce/reduce conflict for GTE resolved using rule 19 (expr -> bexpr .)
    AND             reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    OR              reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    LPAREN          reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    NOT             reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    INT             reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    FLOAT           reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    ID              reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    STRING          reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    WHILE           reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    IF              reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    TRUE            reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    FALSE           reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    END             reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    ELSE            reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    ELSIF           reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    BODY            reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    $end            reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    RPAREN          reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    THEN            reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    DO              reduce using rule 44 (bexpr -> bexpr OR bexpr .)
    EQUALS          reduce using rule 19 (expr -> bexpr .)
    LT              reduce using rule 19 (expr -> bexpr .)
    GT              reduce using rule 19 (expr -> bexpr .)
    LTE             reduce using rule 19 (expr -> bexpr .)
    GTE             reduce using rule 19 (expr -> bexpr .)

  ! EQUALS          [ reduce using rule 44 (bexpr -> bexpr OR bexpr .) ]
  ! LT              [ reduce using rule 44 (bexpr -> bexpr OR bexpr .) ]
  ! GT              [ reduce using rule 44 (bexpr -> bexpr OR bexpr .) ]
  ! LTE             [ reduce using rule 44 (bexpr -> bexpr OR bexpr .) ]
  ! GTE             [ reduce using rule 44 (bexpr -> bexpr OR bexpr .) ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 59 ]


state 84

    (17) expr -> LPAREN expr RPAREN .

    EQUALS          reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    LTE             reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    GTE             reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    NOT             reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    INT             reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    FLOAT           reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    ID              reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    STRING          reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    IF              reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    TRUE            reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    FALSE           reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    END             reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    ELSIF           reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    BODY            reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    THEN            reduce using rule 17 (expr -> LPAREN expr RPAREN .)
    DO              reduce using rule 17 (expr -> LPAREN expr RPAREN .)


state 85

    (62) state_var_arg -> ID .
    (57) state_var_rd -> ID . LPAREN state_var_args RPAREN

    COMMA           reduce using rule 62 (state_var_arg -> ID .)
    RPAREN          reduce using rule 62 (state_var_arg -> ID .)
    LPAREN          shift and go to state 100


state 86

    (61) state_var_arg -> state_var_rd .

    COMMA           reduce using rule 61 (state_var_arg -> state_var_rd .)
    RPAREN          reduce using rule 61 (state_var_arg -> state_var_rd .)


state 87

    (57) state_var_rd -> ID LPAREN state_var_args . RPAREN
    (58) state_var_wr -> ID LPAREN state_var_args . RPAREN ASSIGN expr

    RPAREN          shift and go to state 101


state 88

    (59) state_var_args -> state_var_arg . COMMA state_var_args
    (60) state_var_args -> state_var_arg .

    COMMA           shift and go to state 102
    RPAREN          reduce using rule 60 (state_var_args -> state_var_arg .)


state 89

    (64) loc_var_wr -> ID ASSIGN expr .
    (45) bexpr -> expr . EQUALS expr
    (46) bexpr -> expr . LT expr
    (47) bexpr -> expr . GT expr
    (48) bexpr -> expr . LTE expr
    (49) bexpr -> expr . GTE expr

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
    LPAREN          reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    NOT             reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    INT             reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    FLOAT           reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    ID              reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    STRING          reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    WHILE           reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    IF              reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    TRUE            reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    FALSE           reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    END             reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    AND             reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    OR              reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    BODY            reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    $end            reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    RPAREN          reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    THEN            reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    DO              reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    ELSE            reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    ELSIF           reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .)
    EQUALS          shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 64
    LTE             shift and go to state 68
    GTE             shift and go to state 65

  ! EQUALS          [ reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .) ]
  ! LT              [ reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .) ]
  ! GT              [ reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .) ]
  ! LTE             [ reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .) ]
  ! GTE             [ reduce using rule 64 (loc_var_wr -> ID ASSIGN expr .) ]


state 90

    (29) if_statement -> IF bexpr THEN . exprs END
    (30) if_statement -> IF bexpr THEN . exprs elsif_blocks END
    (31) if_statement -> IF bexpr THEN . exprs ELSE exprs END
    (32) if_statement -> IF bexpr THEN . exprs elsif_blocks ELSE exprs END
    (14) exprs -> . LPAREN exprs RPAREN
    (15) exprs -> . expr exprs
    (16) exprs -> .
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END
    (54) true -> . TRUE
    (55) false -> . FALSE

    LPAREN          shift and go to state 48
    END             reduce using rule 16 (exprs -> .)
    ELSE            reduce using rule 16 (exprs -> .)
    ELSIF           reduce using rule 16 (exprs -> .)
    NOT             shift and go to state 46
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 51
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41

    true                           shift and go to state 38
    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    expr                           shift and go to state 52
    state_var_wr                   shift and go to state 34
    exprs                          shift and go to state 103
    state_var_rd                   shift and go to state 49
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 50

state 91

    (47) bexpr -> expr GT expr .
    (45) bexpr -> expr . EQUALS expr
    (46) bexpr -> expr . LT expr
    (47) bexpr -> expr . GT expr
    (48) bexpr -> expr . LTE expr
    (49) bexpr -> expr . GTE expr

    AND             reduce using rule 47 (bexpr -> expr GT expr .)
    OR              reduce using rule 47 (bexpr -> expr GT expr .)
    EQUALS          reduce using rule 47 (bexpr -> expr GT expr .)
    LT              reduce using rule 47 (bexpr -> expr GT expr .)
    GT              reduce using rule 47 (bexpr -> expr GT expr .)
    LTE             reduce using rule 47 (bexpr -> expr GT expr .)
    GTE             reduce using rule 47 (bexpr -> expr GT expr .)
    LPAREN          reduce using rule 47 (bexpr -> expr GT expr .)
    NOT             reduce using rule 47 (bexpr -> expr GT expr .)
    INT             reduce using rule 47 (bexpr -> expr GT expr .)
    FLOAT           reduce using rule 47 (bexpr -> expr GT expr .)
    ID              reduce using rule 47 (bexpr -> expr GT expr .)
    STRING          reduce using rule 47 (bexpr -> expr GT expr .)
    WHILE           reduce using rule 47 (bexpr -> expr GT expr .)
    IF              reduce using rule 47 (bexpr -> expr GT expr .)
    TRUE            reduce using rule 47 (bexpr -> expr GT expr .)
    FALSE           reduce using rule 47 (bexpr -> expr GT expr .)
    END             reduce using rule 47 (bexpr -> expr GT expr .)
    ELSE            reduce using rule 47 (bexpr -> expr GT expr .)
    ELSIF           reduce using rule 47 (bexpr -> expr GT expr .)
    BODY            reduce using rule 47 (bexpr -> expr GT expr .)
    $end            reduce using rule 47 (bexpr -> expr GT expr .)
    RPAREN          reduce using rule 47 (bexpr -> expr GT expr .)
    THEN            reduce using rule 47 (bexpr -> expr GT expr .)
    DO              reduce using rule 47 (bexpr -> expr GT expr .)

  ! EQUALS          [ shift and go to state 66 ]
  ! LT              [ shift and go to state 67 ]
  ! GT              [ shift and go to state 64 ]
  ! LTE             [ shift and go to state 68 ]
  ! GTE             [ shift and go to state 65 ]


state 92

    (49) bexpr -> expr GTE expr .
    (45) bexpr -> expr . EQUALS expr
    (46) bexpr -> expr . LT expr
    (47) bexpr -> expr . GT expr
    (48) bexpr -> expr . LTE expr
    (49) bexpr -> expr . GTE expr

    AND             reduce using rule 49 (bexpr -> expr GTE expr .)
    OR              reduce using rule 49 (bexpr -> expr GTE expr .)
    EQUALS          reduce using rule 49 (bexpr -> expr GTE expr .)
    LT              reduce using rule 49 (bexpr -> expr GTE expr .)
    GT              reduce using rule 49 (bexpr -> expr GTE expr .)
    LTE             reduce using rule 49 (bexpr -> expr GTE expr .)
    GTE             reduce using rule 49 (bexpr -> expr GTE expr .)
    LPAREN          reduce using rule 49 (bexpr -> expr GTE expr .)
    NOT             reduce using rule 49 (bexpr -> expr GTE expr .)
    INT             reduce using rule 49 (bexpr -> expr GTE expr .)
    FLOAT           reduce using rule 49 (bexpr -> expr GTE expr .)
    ID              reduce using rule 49 (bexpr -> expr GTE expr .)
    STRING          reduce using rule 49 (bexpr -> expr GTE expr .)
    WHILE           reduce using rule 49 (bexpr -> expr GTE expr .)
    IF              reduce using rule 49 (bexpr -> expr GTE expr .)
    TRUE            reduce using rule 49 (bexpr -> expr GTE expr .)
    FALSE           reduce using rule 49 (bexpr -> expr GTE expr .)
    END             reduce using rule 49 (bexpr -> expr GTE expr .)
    ELSE            reduce using rule 49 (bexpr -> expr GTE expr .)
    ELSIF           reduce using rule 49 (bexpr -> expr GTE expr .)
    BODY            reduce using rule 49 (bexpr -> expr GTE expr .)
    $end            reduce using rule 49 (bexpr -> expr GTE expr .)
    RPAREN          reduce using rule 49 (bexpr -> expr GTE expr .)
    THEN            reduce using rule 49 (bexpr -> expr GTE expr .)
    DO              reduce using rule 49 (bexpr -> expr GTE expr .)

  ! EQUALS          [ shift and go to state 66 ]
  ! LT              [ shift and go to state 67 ]
  ! GT              [ shift and go to state 64 ]
  ! LTE             [ shift and go to state 68 ]
  ! GTE             [ shift and go to state 65 ]


state 93

    (45) bexpr -> expr EQUALS expr .
    (45) bexpr -> expr . EQUALS expr
    (46) bexpr -> expr . LT expr
    (47) bexpr -> expr . GT expr
    (48) bexpr -> expr . LTE expr
    (49) bexpr -> expr . GTE expr

    AND             reduce using rule 45 (bexpr -> expr EQUALS expr .)
    OR              reduce using rule 45 (bexpr -> expr EQUALS expr .)
    EQUALS          reduce using rule 45 (bexpr -> expr EQUALS expr .)
    LPAREN          reduce using rule 45 (bexpr -> expr EQUALS expr .)
    NOT             reduce using rule 45 (bexpr -> expr EQUALS expr .)
    INT             reduce using rule 45 (bexpr -> expr EQUALS expr .)
    FLOAT           reduce using rule 45 (bexpr -> expr EQUALS expr .)
    ID              reduce using rule 45 (bexpr -> expr EQUALS expr .)
    STRING          reduce using rule 45 (bexpr -> expr EQUALS expr .)
    WHILE           reduce using rule 45 (bexpr -> expr EQUALS expr .)
    IF              reduce using rule 45 (bexpr -> expr EQUALS expr .)
    TRUE            reduce using rule 45 (bexpr -> expr EQUALS expr .)
    FALSE           reduce using rule 45 (bexpr -> expr EQUALS expr .)
    END             reduce using rule 45 (bexpr -> expr EQUALS expr .)
    ELSE            reduce using rule 45 (bexpr -> expr EQUALS expr .)
    ELSIF           reduce using rule 45 (bexpr -> expr EQUALS expr .)
    BODY            reduce using rule 45 (bexpr -> expr EQUALS expr .)
    $end            reduce using rule 45 (bexpr -> expr EQUALS expr .)
    RPAREN          reduce using rule 45 (bexpr -> expr EQUALS expr .)
    THEN            reduce using rule 45 (bexpr -> expr EQUALS expr .)
    DO              reduce using rule 45 (bexpr -> expr EQUALS expr .)
    LT              shift and go to state 67
    GT              shift and go to state 64
    LTE             shift and go to state 68
    GTE             shift and go to state 65

  ! LT              [ reduce using rule 45 (bexpr -> expr EQUALS expr .) ]
  ! GT              [ reduce using rule 45 (bexpr -> expr EQUALS expr .) ]
  ! LTE             [ reduce using rule 45 (bexpr -> expr EQUALS expr .) ]
  ! GTE             [ reduce using rule 45 (bexpr -> expr EQUALS expr .) ]
  ! EQUALS          [ shift and go to state 66 ]


state 94

    (46) bexpr -> expr LT expr .
    (45) bexpr -> expr . EQUALS expr
    (46) bexpr -> expr . LT expr
    (47) bexpr -> expr . GT expr
    (48) bexpr -> expr . LTE expr
    (49) bexpr -> expr . GTE expr

    AND             reduce using rule 46 (bexpr -> expr LT expr .)
    OR              reduce using rule 46 (bexpr -> expr LT expr .)
    EQUALS          reduce using rule 46 (bexpr -> expr LT expr .)
    LT              reduce using rule 46 (bexpr -> expr LT expr .)
    GT              reduce using rule 46 (bexpr -> expr LT expr .)
    LTE             reduce using rule 46 (bexpr -> expr LT expr .)
    GTE             reduce using rule 46 (bexpr -> expr LT expr .)
    LPAREN          reduce using rule 46 (bexpr -> expr LT expr .)
    NOT             reduce using rule 46 (bexpr -> expr LT expr .)
    INT             reduce using rule 46 (bexpr -> expr LT expr .)
    FLOAT           reduce using rule 46 (bexpr -> expr LT expr .)
    ID              reduce using rule 46 (bexpr -> expr LT expr .)
    STRING          reduce using rule 46 (bexpr -> expr LT expr .)
    WHILE           reduce using rule 46 (bexpr -> expr LT expr .)
    IF              reduce using rule 46 (bexpr -> expr LT expr .)
    TRUE            reduce using rule 46 (bexpr -> expr LT expr .)
    FALSE           reduce using rule 46 (bexpr -> expr LT expr .)
    END             reduce using rule 46 (bexpr -> expr LT expr .)
    ELSE            reduce using rule 46 (bexpr -> expr LT expr .)
    ELSIF           reduce using rule 46 (bexpr -> expr LT expr .)
    BODY            reduce using rule 46 (bexpr -> expr LT expr .)
    $end            reduce using rule 46 (bexpr -> expr LT expr .)
    RPAREN          reduce using rule 46 (bexpr -> expr LT expr .)
    THEN            reduce using rule 46 (bexpr -> expr LT expr .)
    DO              reduce using rule 46 (bexpr -> expr LT expr .)

  ! EQUALS          [ shift and go to state 66 ]
  ! LT              [ shift and go to state 67 ]
  ! GT              [ shift and go to state 64 ]
  ! LTE             [ shift and go to state 68 ]
  ! GTE             [ shift and go to state 65 ]


state 95

    (48) bexpr -> expr LTE expr .
    (45) bexpr -> expr . EQUALS expr
    (46) bexpr -> expr . LT expr
    (47) bexpr -> expr . GT expr
    (48) bexpr -> expr . LTE expr
    (49) bexpr -> expr . GTE expr

    AND             reduce using rule 48 (bexpr -> expr LTE expr .)
    OR              reduce using rule 48 (bexpr -> expr LTE expr .)
    EQUALS          reduce using rule 48 (bexpr -> expr LTE expr .)
    LT              reduce using rule 48 (bexpr -> expr LTE expr .)
    GT              reduce using rule 48 (bexpr -> expr LTE expr .)
    LTE             reduce using rule 48 (bexpr -> expr LTE expr .)
    GTE             reduce using rule 48 (bexpr -> expr LTE expr .)
    LPAREN          reduce using rule 48 (bexpr -> expr LTE expr .)
    NOT             reduce using rule 48 (bexpr -> expr LTE expr .)
    INT             reduce using rule 48 (bexpr -> expr LTE expr .)
    FLOAT           reduce using rule 48 (bexpr -> expr LTE expr .)
    ID              reduce using rule 48 (bexpr -> expr LTE expr .)
    STRING          reduce using rule 48 (bexpr -> expr LTE expr .)
    WHILE           reduce using rule 48 (bexpr -> expr LTE expr .)
    IF              reduce using rule 48 (bexpr -> expr LTE expr .)
    TRUE            reduce using rule 48 (bexpr -> expr LTE expr .)
    FALSE           reduce using rule 48 (bexpr -> expr LTE expr .)
    END             reduce using rule 48 (bexpr -> expr LTE expr .)
    ELSE            reduce using rule 48 (bexpr -> expr LTE expr .)
    ELSIF           reduce using rule 48 (bexpr -> expr LTE expr .)
    BODY            reduce using rule 48 (bexpr -> expr LTE expr .)
    $end            reduce using rule 48 (bexpr -> expr LTE expr .)
    RPAREN          reduce using rule 48 (bexpr -> expr LTE expr .)
    THEN            reduce using rule 48 (bexpr -> expr LTE expr .)
    DO              reduce using rule 48 (bexpr -> expr LTE expr .)

  ! EQUALS          [ shift and go to state 66 ]
  ! LT              [ shift and go to state 67 ]
  ! GT              [ shift and go to state 64 ]
  ! LTE             [ shift and go to state 68 ]
  ! GTE             [ shift and go to state 65 ]


state 96

    (28) while_loop -> WHILE bexpr DO . exprs END
    (14) exprs -> . LPAREN exprs RPAREN
    (15) exprs -> . expr exprs
    (16) exprs -> .
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END
    (54) true -> . TRUE
    (55) false -> . FALSE

    LPAREN          shift and go to state 48
    END             reduce using rule 16 (exprs -> .)
    NOT             shift and go to state 46
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 51
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41

    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    true                           shift and go to state 38
    expr                           shift and go to state 52
    state_var_wr                   shift and go to state 34
    exprs                          shift and go to state 104
    state_var_rd                   shift and go to state 49
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 50

state 97

    (8) task -> TASK COLON ID LPAREN params RPAREN .

    PRE             reduce using rule 8 (task -> TASK COLON ID LPAREN params RPAREN .)


state 98

    (14) exprs -> LPAREN exprs RPAREN .

    END             reduce using rule 14 (exprs -> LPAREN exprs RPAREN .)
    ELSE            reduce using rule 14 (exprs -> LPAREN exprs RPAREN .)
    ELSIF           reduce using rule 14 (exprs -> LPAREN exprs RPAREN .)
    RPAREN          reduce using rule 14 (exprs -> LPAREN exprs RPAREN .)
    ID              reduce using rule 14 (exprs -> LPAREN exprs RPAREN .)
    $end            reduce using rule 14 (exprs -> LPAREN exprs RPAREN .)


state 99

    (43) bexpr -> bexpr AND bexpr .
    (43) bexpr -> bexpr . AND bexpr
    (44) bexpr -> bexpr . OR bexpr
    (19) expr -> bexpr .

  ! reduce/reduce conflict for EQUALS resolved using rule 19 (expr -> bexpr .)
  ! reduce/reduce conflict for LT resolved using rule 19 (expr -> bexpr .)
  ! reduce/reduce conflict for GT resolved using rule 19 (expr -> bexpr .)
  ! reduce/reduce conflict for LTE resolved using rule 19 (expr -> bexpr .)
  ! reduce/reduce conflict for GTE resolved using rule 19 (expr -> bexpr .)
    AND             reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    OR              reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    LPAREN          reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    NOT             reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    INT             reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    FLOAT           reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    ID              reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    STRING          reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    WHILE           reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    IF              reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    TRUE            reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    FALSE           reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    END             reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    ELSE            reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    ELSIF           reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    BODY            reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    $end            reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    RPAREN          reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    THEN            reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    DO              reduce using rule 43 (bexpr -> bexpr AND bexpr .)
    EQUALS          reduce using rule 19 (expr -> bexpr .)
    LT              reduce using rule 19 (expr -> bexpr .)
    GT              reduce using rule 19 (expr -> bexpr .)
    LTE             reduce using rule 19 (expr -> bexpr .)
    GTE             reduce using rule 19 (expr -> bexpr .)

  ! EQUALS          [ reduce using rule 43 (bexpr -> bexpr AND bexpr .) ]
  ! LT              [ reduce using rule 43 (bexpr -> bexpr AND bexpr .) ]
  ! GT              [ reduce using rule 43 (bexpr -> bexpr AND bexpr .) ]
  ! LTE             [ reduce using rule 43 (bexpr -> bexpr AND bexpr .) ]
  ! GTE             [ reduce using rule 43 (bexpr -> bexpr AND bexpr .) ]
  ! AND             [ shift and go to state 74 ]
  ! OR              [ shift and go to state 59 ]


state 100

    (57) state_var_rd -> ID LPAREN . state_var_args RPAREN
    (59) state_var_args -> . state_var_arg COMMA state_var_args
    (60) state_var_args -> . state_var_arg
    (61) state_var_arg -> . state_var_rd
    (62) state_var_arg -> . ID
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN

    ID              shift and go to state 85

    state_var_rd                   shift and go to state 86
    state_var_args                 shift and go to state 105
    state_var_arg                  shift and go to state 88

state 101

    (57) state_var_rd -> ID LPAREN state_var_args RPAREN .
    (58) state_var_wr -> ID LPAREN state_var_args RPAREN . ASSIGN expr

    EQUALS          reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    LT              reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    GT              reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    LTE             reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    GTE             reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    LPAREN          reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    NOT             reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    INT             reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    FLOAT           reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    ID              reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    STRING          reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    WHILE           reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    IF              reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    TRUE            reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    FALSE           reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    END             reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    ELSE            reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    ELSIF           reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    AND             reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    OR              reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    BODY            reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    $end            reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    RPAREN          reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    THEN            reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    DO              reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    ASSIGN          shift and go to state 106


state 102

    (59) state_var_args -> state_var_arg COMMA . state_var_args
    (59) state_var_args -> . state_var_arg COMMA state_var_args
    (60) state_var_args -> . state_var_arg
    (61) state_var_arg -> . state_var_rd
    (62) state_var_arg -> . ID
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN

    ID              shift and go to state 85

    state_var_rd                   shift and go to state 86
    state_var_arg                  shift and go to state 88
    state_var_args                 shift and go to state 107

state 103

    (29) if_statement -> IF bexpr THEN exprs . END
    (30) if_statement -> IF bexpr THEN exprs . elsif_blocks END
    (31) if_statement -> IF bexpr THEN exprs . ELSE exprs END
    (32) if_statement -> IF bexpr THEN exprs . elsif_blocks ELSE exprs END
    (33) elsif_blocks -> . elsif_blocks elsif_block
    (34) elsif_blocks -> . elsif_block
    (35) elsif_block -> . ELSIF bexpr THEN exprs

    END             shift and go to state 108
    ELSE            shift and go to state 111
    ELSIF           shift and go to state 109

    elsif_blocks                   shift and go to state 110
    elsif_block                    shift and go to state 112

state 104

    (28) while_loop -> WHILE bexpr DO exprs . END

    END             shift and go to state 113


state 105

    (57) state_var_rd -> ID LPAREN state_var_args . RPAREN

    RPAREN          shift and go to state 114


state 106

    (58) state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN . expr
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END
    (54) true -> . TRUE
    (55) false -> . FALSE

    LPAREN          shift and go to state 37
    NOT             shift and go to state 46
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 51
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41

    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    true                           shift and go to state 38
    expr                           shift and go to state 115
    state_var_wr                   shift and go to state 34
    state_var_rd                   shift and go to state 49
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 50

state 107

    (59) state_var_args -> state_var_arg COMMA state_var_args .

    RPAREN          reduce using rule 59 (state_var_args -> state_var_arg COMMA state_var_args .)


state 108

    (29) if_statement -> IF bexpr THEN exprs END .

    AND             reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    OR              reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    BODY            reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    EQUALS          reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    LT              reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    GT              reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    LTE             reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    GTE             reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    LPAREN          reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    NOT             reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    INT             reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    FLOAT           reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    ID              reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    STRING          reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    WHILE           reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    IF              reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    TRUE            reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    FALSE           reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    $end            reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    RPAREN          reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    THEN            reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    DO              reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    END             reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    ELSE            reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)
    ELSIF           reduce using rule 29 (if_statement -> IF bexpr THEN exprs END .)


state 109

    (35) elsif_block -> ELSIF . bexpr THEN exprs
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (54) true -> . TRUE
    (55) false -> . FALSE
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END

    NOT             shift and go to state 46
    LPAREN          shift and go to state 37
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41
    ID              shift and go to state 39
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40

    false                          shift and go to state 23
    string                         shift and go to state 29
    control_structure              shift and go to state 26
    expr                           shift and go to state 43
    state_var_wr                   shift and go to state 34
    state_var_rd                   shift and go to state 24
    loc_var_rd                     shift and go to state 35
    while_loop                     shift and go to state 33
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    true                           shift and go to state 38
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 116

state 110

    (30) if_statement -> IF bexpr THEN exprs elsif_blocks . END
    (32) if_statement -> IF bexpr THEN exprs elsif_blocks . ELSE exprs END
    (33) elsif_blocks -> elsif_blocks . elsif_block
    (35) elsif_block -> . ELSIF bexpr THEN exprs

    END             shift and go to state 117
    ELSE            shift and go to state 118
    ELSIF           shift and go to state 109

    elsif_block                    shift and go to state 119

state 111

    (31) if_statement -> IF bexpr THEN exprs ELSE . exprs END
    (14) exprs -> . LPAREN exprs RPAREN
    (15) exprs -> . expr exprs
    (16) exprs -> .
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END
    (54) true -> . TRUE
    (55) false -> . FALSE

    LPAREN          shift and go to state 48
    END             reduce using rule 16 (exprs -> .)
    NOT             shift and go to state 46
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 51
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41

    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    true                           shift and go to state 38
    expr                           shift and go to state 52
    state_var_wr                   shift and go to state 34
    exprs                          shift and go to state 120
    state_var_rd                   shift and go to state 49
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 50

state 112

    (34) elsif_blocks -> elsif_block .

    END             reduce using rule 34 (elsif_blocks -> elsif_block .)
    ELSE            reduce using rule 34 (elsif_blocks -> elsif_block .)
    ELSIF           reduce using rule 34 (elsif_blocks -> elsif_block .)


state 113

    (28) while_loop -> WHILE bexpr DO exprs END .

    AND             reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    OR              reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    BODY            reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    EQUALS          reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    LT              reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    GT              reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    LTE             reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    GTE             reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    LPAREN          reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    NOT             reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    INT             reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    FLOAT           reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    ID              reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    STRING          reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    WHILE           reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    IF              reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    TRUE            reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    FALSE           reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    $end            reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    RPAREN          reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    THEN            reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    DO              reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    END             reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    ELSE            reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)
    ELSIF           reduce using rule 28 (while_loop -> WHILE bexpr DO exprs END .)


state 114

    (57) state_var_rd -> ID LPAREN state_var_args RPAREN .

    COMMA           reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)
    RPAREN          reduce using rule 57 (state_var_rd -> ID LPAREN state_var_args RPAREN .)


state 115

    (58) state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .
    (45) bexpr -> expr . EQUALS expr
    (46) bexpr -> expr . LT expr
    (47) bexpr -> expr . GT expr
    (48) bexpr -> expr . LTE expr
    (49) bexpr -> expr . GTE expr

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
    RPAREN          reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    LPAREN          reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    NOT             reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    INT             reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    FLOAT           reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    ID              reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    STRING          reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    WHILE           reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    IF              reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    TRUE            reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    FALSE           reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    END             reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    AND             reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    OR              reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    BODY            reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    $end            reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    THEN            reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    DO              reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    ELSE            reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    ELSIF           reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .)
    EQUALS          shift and go to state 66
    LT              shift and go to state 67
    GT              shift and go to state 64
    LTE             shift and go to state 68
    GTE             shift and go to state 65

  ! EQUALS          [ reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .) ]
  ! LT              [ reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .) ]
  ! GT              [ reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .) ]
  ! LTE             [ reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .) ]
  ! GTE             [ reduce using rule 58 (state_var_wr -> ID LPAREN state_var_args RPAREN ASSIGN expr .) ]


state 116

    (35) elsif_block -> ELSIF bexpr . THEN exprs
    (43) bexpr -> bexpr . AND bexpr
    (44) bexpr -> bexpr . OR bexpr
    (19) expr -> bexpr .

    THEN            shift and go to state 121
    AND             shift and go to state 74
    OR              shift and go to state 59
    EQUALS          reduce using rule 19 (expr -> bexpr .)
    LT              reduce using rule 19 (expr -> bexpr .)
    GT              reduce using rule 19 (expr -> bexpr .)
    LTE             reduce using rule 19 (expr -> bexpr .)
    GTE             reduce using rule 19 (expr -> bexpr .)


state 117

    (30) if_statement -> IF bexpr THEN exprs elsif_blocks END .

    AND             reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    OR              reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    BODY            reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    EQUALS          reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    LT              reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    GT              reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    LTE             reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    GTE             reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    LPAREN          reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    NOT             reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    INT             reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    FLOAT           reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    ID              reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    STRING          reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    WHILE           reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    IF              reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    TRUE            reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    FALSE           reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    $end            reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    RPAREN          reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    THEN            reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    DO              reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    END             reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    ELSE            reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)
    ELSIF           reduce using rule 30 (if_statement -> IF bexpr THEN exprs elsif_blocks END .)


state 118

    (32) if_statement -> IF bexpr THEN exprs elsif_blocks ELSE . exprs END
    (14) exprs -> . LPAREN exprs RPAREN
    (15) exprs -> . expr exprs
    (16) exprs -> .
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END
    (54) true -> . TRUE
    (55) false -> . FALSE

    LPAREN          shift and go to state 48
    END             reduce using rule 16 (exprs -> .)
    NOT             shift and go to state 46
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 51
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41

    true                           shift and go to state 38
    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    expr                           shift and go to state 52
    state_var_wr                   shift and go to state 34
    exprs                          shift and go to state 122
    state_var_rd                   shift and go to state 49
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 50

state 119

    (33) elsif_blocks -> elsif_blocks elsif_block .

    END             reduce using rule 33 (elsif_blocks -> elsif_blocks elsif_block .)
    ELSE            reduce using rule 33 (elsif_blocks -> elsif_blocks elsif_block .)
    ELSIF           reduce using rule 33 (elsif_blocks -> elsif_blocks elsif_block .)


state 120

    (31) if_statement -> IF bexpr THEN exprs ELSE exprs . END

    END             shift and go to state 123


state 121

    (35) elsif_block -> ELSIF bexpr THEN . exprs
    (14) exprs -> . LPAREN exprs RPAREN
    (15) exprs -> . expr exprs
    (16) exprs -> .
    (17) expr -> . LPAREN expr RPAREN
    (18) expr -> . control_structure
    (19) expr -> . bexpr
    (20) expr -> . aexpr
    (21) expr -> . string
    (22) expr -> . state_var_rd
    (23) expr -> . state_var_wr
    (24) expr -> . loc_var_rd
    (25) expr -> . loc_var_wr
    (26) control_structure -> . while_loop
    (27) control_structure -> . if_statement
    (43) bexpr -> . bexpr AND bexpr
    (44) bexpr -> . bexpr OR bexpr
    (45) bexpr -> . expr EQUALS expr
    (46) bexpr -> . expr LT expr
    (47) bexpr -> . expr GT expr
    (48) bexpr -> . expr LTE expr
    (49) bexpr -> . expr GTE expr
    (50) bexpr -> . NOT bexpr
    (51) bexpr -> . true
    (52) bexpr -> . false
    (53) bexpr -> . state_var_rd
    (36) aexpr -> . aexpr PLUS aexpr
    (37) aexpr -> . aexpr MINUS aexpr
    (38) aexpr -> . aexpr TIMES aexpr
    (39) aexpr -> . aexpr DIVIDED_BY aexpr
    (40) aexpr -> . INT
    (41) aexpr -> . FLOAT
    (42) aexpr -> . ID
    (56) string -> . STRING
    (57) state_var_rd -> . ID LPAREN state_var_args RPAREN
    (58) state_var_wr -> . ID LPAREN state_var_args RPAREN ASSIGN expr
    (63) loc_var_rd -> . ID
    (64) loc_var_wr -> . ID ASSIGN expr
    (28) while_loop -> . WHILE bexpr DO exprs END
    (29) if_statement -> . IF bexpr THEN exprs END
    (30) if_statement -> . IF bexpr THEN exprs elsif_blocks END
    (31) if_statement -> . IF bexpr THEN exprs ELSE exprs END
    (32) if_statement -> . IF bexpr THEN exprs elsif_blocks ELSE exprs END
    (54) true -> . TRUE
    (55) false -> . FALSE

    LPAREN          shift and go to state 48
    END             reduce using rule 16 (exprs -> .)
    ELSE            reduce using rule 16 (exprs -> .)
    ELSIF           reduce using rule 16 (exprs -> .)
    NOT             shift and go to state 46
    INT             shift and go to state 42
    FLOAT           shift and go to state 44
    ID              shift and go to state 51
    STRING          shift and go to state 31
    WHILE           shift and go to state 45
    IF              shift and go to state 40
    TRUE            shift and go to state 30
    FALSE           shift and go to state 41

    false                          shift and go to state 23
    string                         shift and go to state 29
    while_loop                     shift and go to state 33
    true                           shift and go to state 38
    expr                           shift and go to state 52
    state_var_wr                   shift and go to state 34
    exprs                          shift and go to state 124
    state_var_rd                   shift and go to state 49
    loc_var_rd                     shift and go to state 35
    loc_var_wr                     shift and go to state 25
    if_statement                   shift and go to state 32
    control_structure              shift and go to state 26
    aexpr                          shift and go to state 27
    bexpr                          shift and go to state 50

state 122

    (32) if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs . END

    END             shift and go to state 125


state 123

    (31) if_statement -> IF bexpr THEN exprs ELSE exprs END .

    AND             reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    OR              reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    BODY            reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    EQUALS          reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    LT              reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    GT              reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    LTE             reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    GTE             reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    LPAREN          reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    NOT             reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    INT             reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    FLOAT           reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    ID              reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    STRING          reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    WHILE           reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    IF              reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    TRUE            reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    FALSE           reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    $end            reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    RPAREN          reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    THEN            reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    DO              reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    END             reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    ELSE            reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)
    ELSIF           reduce using rule 31 (if_statement -> IF bexpr THEN exprs ELSE exprs END .)


state 124

    (35) elsif_block -> ELSIF bexpr THEN exprs .

    END             reduce using rule 35 (elsif_block -> ELSIF bexpr THEN exprs .)
    ELSE            reduce using rule 35 (elsif_block -> ELSIF bexpr THEN exprs .)
    ELSIF           reduce using rule 35 (elsif_block -> ELSIF bexpr THEN exprs .)


state 125

    (32) if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .

    AND             reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    OR              reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    BODY            reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    EQUALS          reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    LT              reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    GT              reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    LTE             reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    GTE             reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    LPAREN          reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    NOT             reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    INT             reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    FLOAT           reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    ID              reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    STRING          reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    WHILE           reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    IF              reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    TRUE            reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    FALSE           reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    $end            reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    RPAREN          reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    THEN            reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    DO              reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    END             reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    ELSE            reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)
    ELSIF           reduce using rule 32 (if_statement -> IF bexpr THEN exprs elsif_blocks ELSE exprs END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 22 resolved as shift
WARNING: shift/reduce conflict for AND in state 50 resolved as shift
WARNING: shift/reduce conflict for OR in state 50 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 51 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 51 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 72 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 89 resolved as shift
WARNING: shift/reduce conflict for LT in state 89 resolved as shift
WARNING: shift/reduce conflict for GT in state 89 resolved as shift
WARNING: shift/reduce conflict for LTE in state 89 resolved as shift
WARNING: shift/reduce conflict for GTE in state 89 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 115 resolved as shift
WARNING: shift/reduce conflict for LT in state 115 resolved as shift
WARNING: shift/reduce conflict for GT in state 115 resolved as shift
WARNING: shift/reduce conflict for LTE in state 115 resolved as shift
WARNING: shift/reduce conflict for GTE in state 115 resolved as shift
WARNING: reduce/reduce conflict in state 24 resolved using rule (expr -> state_var_rd)
WARNING: rejected rule (bexpr -> state_var_rd) in state 24
WARNING: reduce/reduce conflict in state 39 resolved using rule (aexpr -> ID)
WARNING: rejected rule (loc_var_rd -> ID) in state 39
WARNING: reduce/reduce conflict in state 49 resolved using rule (expr -> state_var_rd)
WARNING: rejected rule (bexpr -> state_var_rd) in state 49
WARNING: reduce/reduce conflict in state 51 resolved using rule (aexpr -> ID)
WARNING: rejected rule (loc_var_rd -> ID) in state 51
WARNING: reduce/reduce conflict in state 70 resolved using rule (expr -> bexpr)
WARNING: rejected rule (bexpr -> NOT bexpr) in state 70
WARNING: reduce/reduce conflict in state 81 resolved using rule (preconditions -> bexpr)
WARNING: rejected rule (bexpr -> bexpr AND bexpr) in state 81
WARNING: reduce/reduce conflict in state 81 resolved using rule (expr -> bexpr)
WARNING: rejected rule (bexpr -> bexpr AND bexpr) in state 81
WARNING: reduce/reduce conflict in state 83 resolved using rule (expr -> bexpr)
WARNING: rejected rule (bexpr -> bexpr OR bexpr) in state 83
WARNING: reduce/reduce conflict in state 99 resolved using rule (expr -> bexpr)
WARNING: rejected rule (bexpr -> bexpr AND bexpr) in state 99
WARNING: Rule (loc_var_rd -> ID) is never reduced
