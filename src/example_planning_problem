self.domain:
   {
      rigid_rels:
      {
         on-dock:
         [
            ('p1', 'd1')

            ('p2', 'd1')

            ('p3', 'd2')

            ('p4', 'd2')

         ]

         adjacent:
         [
            ('d1', 'd2')

         ]

      }

      objects:
      {
         docks:
         set(['d2', 'd1'])

         robots:
         set(['r1', 'r2'])

         piles:
         set(['p2', 'p3', 'p1', 'p4'])

         cargo:
         set(['c3', 'c2', 'c1'])

      }

      state_vars:
      {
         loc:
         {
            ('r1',): d1
            ('r2',): d2
         }

         on-robot:
         {
            ('r1',): None
            ('r2',): None
         }

         in-pile:
         {
            ('c1',): p1
            ('c3',): p3
            ('c2',): p2
         }

      }

      goal:
      {
         in-pile:
         {
            ('c3',): p4
         }

      }

   }

self.task_table:
   {
      t_start:
      {
         id: t_start
         parameters:
         [
            n
         ]

      }

      t_print_result:
      {
         id: t_print_result
         parameters:
         [
            n
         ]

      }

   }

self.method_table:
   {
      m_start:
      {
         exprs:
         {
            arg1:
            {
               arg1: m
               arg2:
               {
                  arg1:
                  {
                     arg1: n
                     e_type: E_LOC_VAR_RD
                  }

                  arg2:
                  {
                     val: 3
                     e_type: E_INT
                  }

                  e_type: E_ADD
               }

               e_type: E_LOC_VAR_WR
            }

            arg2:
            {
               arg1:
               {
                  arg1: t_print_result
                  arg2:
                  [
                     m
                  ]

                  e_type: E_STATE_VAR_RD
               }

               arg2:
               {
                  e_type: E_NOOP
               }

               e_type: E_SEQ
            }

            e_type: E_SEQ
         }

         task:
         {
            id: t_start
            parameters:
            [
               n
            ]

         }

         preconditions:
         {
            preconditions: <function preconditions at 0x1013a3b18>
            pre_code: def precondition():

def preconditions(_):
  print("Evaluating m_start(n) preconditions.\n")
         }

         id: m_start
         parameters:
         [
            n
         ]

      }

      m_print_result:
      {
         exprs:
         {
            arg1:
            {
               arg1: print_result
               arg2:
               [
                  n
               ]

               e_type: E_STATE_VAR_RD
            }

            arg2:
            {
               e_type: E_NOOP
            }

            e_type: E_SEQ
         }

         task:
         {
            id: t_print_result
            parameters:
            [
               n
            ]

         }

         preconditions:
         {
            preconditions: <function preconditions at 0x1013a3b90>
            pre_code: def precondition():

def preconditions(_):
  print("Evaluating m_print_result(n) preconditions.\n")
  =E
         }

         id: m_print_result
         parameters:
         [
            n
         ]

      }

   }

self.task_method_map:
   {
   }

self.action_models:
   [
      ('print_result', <function print_result at 0x1013a38c0>)

   ]

self.commands:
   [
      ('print_result', <function print_result at 0x1013a3938>)

   ]
