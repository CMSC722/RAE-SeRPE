method m1-move-to-room(r,loc1,loc2):
  task: move-to-room(r,loc1,loc2)
  pre:
  =BEGIN
def preconditions(state):
  return state['state_vars']['loc'][(r,)] == loc1
  =END
  body:
    s = search(r,loc2)
    if s then
          exit-room(r,loc1)
          move(r,loc1,loc2)
          enter-room(r,loc2)
    else
      move-towards(r,loc1,loc2)
    end

method m1-enter-room(r,loc1,d,loc2):
  task: enter-room(r,d,loc2)
  pre:
  =BEGIN
def preconditions(state):
  return True
  =END
  body:
    enter(r,d)

method m1-exit-room(r,loc1,d,loc2):
  task: exit-room(r,d,loc2)
  pre:
  =BEGIN
def preconditions(state):
  return True
  =END
  body:
    exit(r,d)

method m1-move-towards(r,loc1,loc2):
  task: move-towards(r,loc1,loc2)
  pre:
  =BEGIN
def preconditions(state):
  return state['state_vars']['loc'][(r,)] == loc1
  =END
    body:
      t=naivePath(r,loc1,loc2)
      if t=='empty' then
        return fail
      else
        while !(t == 'empty') do
              p = poll(t)
              s = search(r, p)
              if s then
                   pt = pop(t)
                   move-to-room(r,loc1,pt)
              else
                   move-towards(r,loc1,pt)
               end
        end
      end
